<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[なんでもやってみるのが良いと思う]]></title>
  <link href="http://stepxstep.org/atom.xml" rel="self"/>
  <link href="http://stepxstep.org/"/>
  <updated>2014-11-04T03:22:17+09:00</updated>
  <id>http://stepxstep.org/</id>
  <author>
    <name><![CDATA[H.Tokida]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vyatta を VyOS にアップデートして Vxlan を利用する]]></title>
    <link href="http://stepxstep.org/blog/2014/11/04/vyatta2vyos/"/>
    <updated>2014-11-04T02:29:00+09:00</updated>
    <id>http://stepxstep.org/blog/2014/11/04/vyatta2vyos</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#add-system-images">add system images</a></li>
  <li><a href="#vxlan-on-vyos-">vxlan on VyOS を試す</a></li>
</ul>

<p>VyOSを利用してみたかったので一旦Vyattaを導入してアップデート <sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> を試みる。</p>

<h1 id="add-system-images">add system images</h1>

<p>VyOSへのアップデートの方法は、公式サイトの以下のリンクに記載されています。</p>

<ul>
  <li>http://wiki.vyos-users.jp/Vyatta%E3%81%8B%E3%82%89%E3%81%AE%E7%A7%BB%E8%A1%8C</li>
</ul>

<p>今回はVersion1.1を試してみたいと思います。</p>

<pre><code>vyatta@vyatta-dal01:~$ show system image
The system currently has the following image(s) installed:

   1: Old-non-image-installation (default boot)

vyatta@vyatta-dal01:~$ add system image http://ftp.tsukuba.wide.ad.jp/software/vyos/iso/release/1.1.0/vyos-1.1.0-amd64.iso
Trying to fetch ISO file from http://ftp.tsukuba.wide.ad.jp/software/vyos/iso/release/1.1.0/vyos-1.1.0-amd64.iso
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  231M  100  231M    0     0  5687k      0  0:00:41  0:00:41 --:--:-- 8782k
ISO download succeeded.
Checking for digital signature file...
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   836  100   836    0     0    540      0  0:00:01  0:00:01 --:--:--  2229
Found it.  Checking digital signature...
gpg: directory `/root/.gnupg' created
gpg: new configuration file `/root/.gnupg/gpg.conf' created
gpg: WARNING: options in `/root/.gnupg/gpg.conf' are not yet active during this run
gpg: keyring `/root/.gnupg/pubring.gpg' created
gpg: Signature made Thu Oct  9 17:42:59 2014 CDT using RSA key ID A442E6E9
gpg: /root/.gnupg/trustdb.gpg: trustdb created
gpg: Good signature from "SO3 Group Maintainers &lt;maintainers@so3group.net&gt;"
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: DD5B B405 35E7 F6E3 4278  1ABF B744 E25A A442 E6E9
Digital signature is valid.
Checking MD5 checksums of files on the ISO image...OK.
Done!
What would you like to name this image? [1.1.0]:
OK.  This image will be named: 1.1.0
Installing "1.1.0" image.
Copying new release files...
Would you like to save the current configuration
directory and config file? (Yes/No) [Yes]:
Copying current configuration...
Would you like to save the SSH host keys from your
current configuration? (Yes/No) [Yes]:
Copying SSH keys...
Setting up grub configuration...
Done.
vyatta@vyatta-dal01:~$ show system image
The system currently has the following image(s) installed:

   1: 1.1.0 (default boot)
   2: Old-non-image-installation
</code></pre>

<p>この状態で<code>reboot</code>をすると新しいイメージで起動をしてきます。</p>

<pre><code>Welcome to VyOS
vyatta@67.228.185.132's password:
Linux vyatta 3.13.11-1-amd64-vyos #1 SMP Wed Sep 3 20:04:22 UTC 2014 x86_64
Welcome to VyOS.
This system is open-source software. The exact distribution terms for
each module comprising the full system are described in the individual
files in /usr/share/doc/*/copyright.
</code></pre>

<h1 id="vxlan-on-vyos-">vxlan on VyOS を試す</h1>

<p>少し前に vxlan on Softlayer ということで同一データセンター内ではマルチキャストが通信できるのでvlanが使えたという事を書きました。VyOSの最新版ではvxlanがサポートされているとのことなので試します。</p>

<pre><code>vyatta@vyatta-dal01# configure
[edit]
vyatta@vyatta-dal01# set interfaces  vxlan vxlan0
[edit]
vyatta@vyatta-dal01# set interfaces vxlan vxlan0 group 239.1.1.1
[edit]
vyatta@vyatta-dal01# set interfaces vxlan vxlan0 vni 42
[edit]
vyatta@vyatta-dal01# ip a

vyatta@vyatta-dal01# set interfaces vxlan vxlan0 address '192.168.42.254/24'
[edit]
vyatta@vyatta-dal01# commit
[edit]
vyatta@vyatta-dal01# save
Saving configuration to '/config/config.boot'...
Done
[edit]
vyatta@vyatta-dal01#   show interfaces vxlan vxlan0
 address 192.168.42.254/24
 group 239.1.1.1
 vni 42
[edit]
vyatta@vyatta-dal01# ip a
4: vxlan0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UNKNOWN group default
    link/ether b6:37:f4:fa:30:d0 brd ff:ff:ff:ff:ff:ff
    inet 192.168.42.254/24 brd 192.168.42.255 scope global vxlan0
       valid_lft forever preferred_lft forever
    inet6 fe80::b437:f4ff:fefa:30d0/64 scope link
[edit]	
</code></pre>

<p>他のサーバの設定は <a href="http://stepxstep.org/blog/2014/11/01/vxlan-on-softlayer/">Vxlan on Softlayer - なんでもやってみるのが良いと思う</a> として行います。現状でこの構成に今回の VyOS が追加されている形になります。</p>

<pre><code>vyatta@vyatta-dal01:~$ ping 192.168.42.2
PING 192.168.42.2 (192.168.42.2) 56(84) bytes of data.
64 bytes from 192.168.42.2: icmp_req=1 ttl=64 time=0.635 ms
64 bytes from 192.168.42.2: icmp_req=2 ttl=64 time=0.402 ms
^C
--- 192.168.42.2 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 999ms
rtt min/avg/max/mdev = 0.402/0.518/0.635/0.118 ms
vyatta@vyatta-dal01:~$ ping 192.168.42.3
PING 192.168.42.3 (192.168.42.3) 56(84) bytes of data.
64 bytes from 192.168.42.3: icmp_req=1 ttl=64 time=1.52 ms
64 bytes from 192.168.42.3: icmp_req=2 ttl=64 time=0.303 ms
^C
--- 192.168.42.3 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1001ms
rtt min/avg/max/mdev = 0.303/0.913/1.523/0.610 ms
</code></pre>

<p>ということで問題なく疎通が出来ています。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>SoftLayerでは仮想サーバのOSを独自には導入できないので初期にVyOSが入れられない。 <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SoftlayerのslコマンドのDocker化]]></title>
    <link href="http://stepxstep.org/blog/2014/11/04/sl-docker/"/>
    <updated>2014-11-04T01:46:00+09:00</updated>
    <id>http://stepxstep.org/blog/2014/11/04/sl-docker</id>
    <content type="html"><![CDATA[<p>SoftLayerのSLコマンドをDocker化しました。
単にDockerhubのAutomated Buildで遊んでみたかっただけなのですが・・</p>

<p>特に理由ないのですが各Linuxサーバに Python + SoftLayer-Cli 入れるのと Docker 入れるのとどっちがいいかなと思った場合にアプリケーションに影響なく利用できそうなのはDockerかなと。</p>

<p>作ってみてローカルのMacbookで利用しているのですが便利です。
これまでVagrant経由でVM起動してそのなかでゴニョゴニョしていました。今回のDockerにしてもboot2dockerで結局のところ似たような感じなのですが<code>config setup</code>で複数のSoftLayer環境を用意する際や、VersionUpをした際に簡単に分離して管理できるのは楽でした。 (まあ.dotfile切り替えるだけなら別の手段もあるかと思いますが)</p>

<h1 id="section">利用方法</h1>

<h2 id="section-1">想定</h2>

<p>このツールは、IBM社のクラウドサービス「SoftLayer」のCLIコマンドである sl コマンドを利用することが出来ます。
本番機などであまりslコマンド及び前提であるpythonを導入したくない場合。Dockerを利用うすることでOS側に影響なくコマンドを利用することが出来ます。 このDockerのImageは470MByte前後のサイズに成ります。</p>

<h2 id="section-2">設定</h2>

<p>以下のコマンドで設定ファイルをコンテナ内部に作ります。</p>

<p><code>$ docker run  -ti tokida/softlayer-cli config setup</code></p>

<p>通常のslコマンド同様にUsernameとAPIキーを設定して下さい。
次に、コンテナを自分用としてローカルにcommitしておきます。</p>

<p><code>$ docker restart 993ae5495011</code></p>

<p>一度コンテナをRestartします。</p>

<p><code>$ docker commit -m "my account" 993ae5495011 tokida/softlayer-cli:my</code></p>

<p>(数字はコンテナIDで <code>docker ps -a</code>で参照すること)
ここではTagに<code>my</code>をつけています。</p>

<h2 id="section-3">利用方法</h2>

<p><code>$ docker run  -ti tokida/softlayer-cli:my  vs list</code></p>

<p>という形で利用することが出来ます。長いのでシェルでエリアス等をしておくと良いかと思います。</p>

<p><code>$ alias sl="docker run  -ti tokida/softlayer-cli:my"</code></p>

<p>こうしておくと普段通り <code>sl</code> コマンドが利用できます。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vxlan on Softlayer]]></title>
    <link href="http://stepxstep.org/blog/2014/11/01/vxlan-on-softlayer/"/>
    <updated>2014-11-01T00:44:00+09:00</updated>
    <id>http://stepxstep.org/blog/2014/11/01/vxlan-on-softlayer</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">これは何？</a></li>
  <li><a href="#section-1">環境</a></li>
  <li><a href="#subnet">同一Subnet内</a></li>
  <li><a href="#vlan">異なるVLAN間</a></li>
</ul>

<h1 id="section">これは何？</h1>

<p>SoftLayerのネットワークはマルチキャストが使えるのでvxlanが動くのかを確認。</p>

<ol>
  <li>同一のSubnet内で利用可能か</li>
  <li>同一のvlan間で利用可能か（これは今回オーダー出来ず）</li>
  <li>異なるVLAN間（VLAN Spaning = on )で利用可能か</li>
</ol>

<p>というところを確認する。</p>

<h1 id="section-1">環境</h1>

<p>今回用意したのはダラスデータセンター内に仮想サーバを2つ起動している状態。プライベートIPで割り当てられているのは同一のSubnet上で登録されている。OSはUbuntu14.04を利用。</p>

<p>仮想サーバは以下のコマンドで作成する。</p>

<pre><code>sl vs create --datacenter=dal01 --cpu=1 --memory=1024 --os=UBUNTU_14_64 --domain=sl.com --hostname=test01 --hourly --san --disk=25,10 --key=mainkey --postinstall=https://gist.githubusercontent.com/tokida/5b58831c0d94ce7b25f2/raw/bootstrap4Ubuntu.sh
</code></pre>

<p>作成した結果は以下の感じになりました。同じSubnetになっていますね。違うSubnetに付け直したかったら動するのがいいのかな？:</p>

<pre><code>:.........:............:...............:.......:........:................:.............:....................:...........:
:    id   : datacenter :      host     : cores : memory :   primary_ip   :  backend_ip : active_transaction :   owner   :
:.........:............:...............:.......:........:................:.............:....................:...........:
: 6743772 :   dal01    : test01.sl.com :   1   :   1G   : 67.228.***.*** : 10.17.93.45 :         -          : *****     :
: 6816622 :   dal01    : test02.sl.com :   1   :   1G   : 67.228.***.*** : 10.17.93.46 :         -          : *****     :
:.........:............:...............:.......:........:................:.............:....................:...........:
</code></pre>

<h1 id="subnet">同一Subnet内</h1>

<p>以下のコマンドによりvxlanを設定する。今回は内部eth0に対して作成する</p>

<pre><code>$ ip link add vxlan0 type vxlan id 42 group 239.1.1.1 dev eth0
$ ip link set up vxlan0
$ ip a add 192.168.42.3/24 dev vxlan0
$ root@test02:~# ip -d link show vxlan0
4: vxlan0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UNKNOWN mode DEFAULT group default
    link/ether 2e:eb:95:ed:97:9d brd ff:ff:ff:ff:ff:ff promiscuity 0
    vxlan id 42 group 239.1.1.1 dev eth0 port 32768 61000 ageing 300
</code></pre>

<p>test01は、<code>192.168.42.2</code>を付与、test02は、<code>192.168.43.3</code>を付与します。</p>

<p>Pingを実行すると</p>

<pre><code>root@test02:~# ping 192.168.42.2
PING 192.168.42.2 (192.168.42.2) 56(84) bytes of data.
64 bytes from 192.168.42.2: icmp_seq=1 ttl=64 time=0.957 ms
64 bytes from 192.168.42.2: icmp_seq=2 ttl=64 time=0.377 ms
</code></pre>

<p>通信ができていることがわかります。マルチキャスト動いているようですね。</p>

<h1 id="vlan">異なるVLAN間</h1>

<p>3台目のサーバをサンノゼに作成します。この場合Subetが違いまたVLANが違う環境となります。VLANスパニングを有効にしているのでこのダラス⇔サンノゼ通信ができるようになっています。</p>

<pre><code>:.........:............:...............:.......:........:................:.............:....................:...........:
:    id   : datacenter :      host     : cores : memory :   primary_ip   :  backend_ip : active_transaction :   owner   :
:.........:............:...............:.......:........:................:.............:....................:...........:
: 6743772 :   dal01    : test01.sl.com :   1   :   1G   : 67.228.***.*** : 10.17.93.45 :         -          : ********* :
: 6816622 :   dal01    : test02.sl.com :   1   :   1G   : 67.228.***.*** : 10.17.93.46 :         -          : ********* :
: 6816998 :   sjc01    : test03.sl.com :   1   :   1G   : 158.85.***.*** : 10.89.0.170 :                    : ********* :
:.........:............:...............:.......:........:................:.............:....................:...........:
</code></pre>

<p>先ほど同様に設定を行い <code>192.168.42.4/24</code>としました。</p>

<pre><code>root@test01:~# ping 192.168.42.4
PING 192.168.42.4 (192.168.42.4) 56(84) bytes of data.
From 192.168.42.2 icmp_seq=1 Destination Host Unreachable
From 192.168.42.2 icmp_seq=2 Destination Host Unreachable
From 192.168.42.2 icmp_seq=3 Destination Host Unreachable
From 192.168.42.2 icmp_seq=4 Destination Host Unreachable
From 192.168.42.2 icmp_seq=5 Destination Host Unreachable
</code></pre>

<p>あわよくば動けば面白いなと思ったけど残念ながらこちらは通信出来ない模様ですね。さすがにDataCenterをまたいでマルチキャストが許可されていないのでしょうか。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SoftLayerに性能保証型iSCSI/NASが登場したので試してみた]]></title>
    <link href="http://stepxstep.org/blog/2014/09/17/consistentstorage/"/>
    <updated>2014-09-17T20:40:00+09:00</updated>
    <id>http://stepxstep.org/blog/2014/09/17/consistentstorage</id>
    <content type="html"><![CDATA[
<pre><code>2014/11/04 追記: [帯域]保証型と書いていましたが、帯域は保証されていないとご指摘を（確かにその通り）受けたので[性能]保証型にしました。さらに言えば性能も保証されていないのですが。
</code></pre>

<p>SoftLayerでの新機能で「性能保証型ブロックデバイス」が登場しました。
1月ほど前からAPIには登場していたのですがようやく正式にリリースされた感じですね。</p>

<h1 id="section">これは何？</h1>

<p>SoftLayerの性能保証型のブロックストレージを購入して簡単にfioでパフォーマンス測定してみましょう。
対象としては普段から利用していることもあり仮想サーバ上からUbuntu14.04を利用したいと思います。</p>

<ul>
  <li>容量 20Gから12TByteまで</li>
  <li>性能保証 100IOPS から 6000IOPSまで</li>
  <li>iSCSI(Block Storage)とNAS(File Storage)の2つのインターフェースで提供</li>
</ul>

<h1 id="section-1">オーダーから設定まで</h1>

<h2 id="section-2">オーダ方法</h2>

<p>オーダ時のオプションで利用OSを選択するようになっていますね。
管理ポータルから、<code>Storage</code>→<code>Block Storage</code>→<code>Order Consistent Performance</code>を選択しましょう。</p>

<p><img src="http://stepxstep.org/images/2014-09-17-iscsi.png" alt="iscsi" /></p>

<p>ここでの費用は、「ディスクサイズ」＋「IOPS」となるようです。この画像の場合、<code>20 GB 100 to 1000 IOPS</code>というは20GのiSCSIディスクはIOPS
として100から1000までが指定可能ということになります。一番安い、20G 100IOPSをオーダしてみたいと思います。</p>

<h2 id="section-3">設定方法</h2>

<p>購入したデバイス（ここでは<code>SL01SL29*****-1 (20 GB)</code>のような名称)の詳細を確認します。
iSCSIデバイスらしく<code>Authorized Hosts</code>という項目があるので利用したいサーバを指定します、すると「Username」「Password」「Host IQN」「Device Type」が該当のホスト向けに表示されます。</p>

<p>画面を見る限り以前までのSnapshotなどの機能はなさそうです（残念！）</p>

<p>今回のiSCSIはマルチパスで構成されているようなので<code>multipath-tools</code>を導入して利用します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">apt-get install multipath-tools
</span><span class="line">apt-get install open-iscsi</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>iSCSIの設定を行います。<code>/etc/iscsi/initiatorname.iscsi</code>のファイルにIQNを設定します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">InitiatorName= "value-from-the-SL-Portal"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>次に<code>/etc/iscsi/iscsid.conf</code>を以下の内容を記載します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">node.session.auth.authmethod = CHAP
</span><span class="line">node.session.auth.username = "Username-value-from-SL-Portal"
</span><span class="line">node.session.auth.password = "Password-value-from-SL-Portal"
</span><span class="line">discovery.sendtargets.auth.authmethod = CHAP
</span><span class="line">discovery.sendtargets.auth.username = "Username-value-from-SL-Portal"
</span><span class="line">discovery.sendtargets.auth.password = "Password-value-from-SL-Portal"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>設定が終わったら <code>/etc/init.d/open-iscsi restart</code>で再起動を行います。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">root@ansibletower:~# iscsiadm -m discovery -t sendtargets -p 10.2.174.111
</span><span class="line">10.2.174.111:3260,1036 iqn.1992-08.com.netapp:hkg0201
</span><span class="line">10.2.174.102:3260,1035 iqn.1992-08.com.netapp:hkg0201</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>iSCSIを探してみると2つのIPで見つけることが出来ました。先ほど書いたようにMultipathでの接続が前提のようですね。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">root@ansibletower:~#  iscsiadm -m node --login
</span><span class="line">Logging in to [iface: default, target: iqn.1992-08.com.netapp:hkg0201, portal: 10.2.174.111,3260] (multiple)
</span><span class="line">Logging in to [iface: default, target: iqn.1992-08.com.netapp:hkg0201, portal: 10.2.174.102,3260] (multiple)
</span><span class="line">Login to [iface: default, target: iqn.1992-08.com.netapp:hkg0201, portal: 10.2.174.111,3260] successful.
</span><span class="line">Login to [iface: default, target: iqn.1992-08.com.netapp:hkg0201, portal: 10.2.174.102,3260] successful.
</span><span class="line">root@ansibletower:~#
</span><span class="line">root@ansibletower:~#
</span><span class="line">root@ansibletower:~# iscsiadm -m session -o show
</span><span class="line">tcp: [1] 10.2.174.111:3260,1036 iqn.1992-08.com.netapp:hkg0201
</span><span class="line">tcp: [2] 10.2.174.102:3260,1035 iqn.1992-08.com.netapp:hkg0201</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>この作業により<code>/dev/sda</code>と<code>/dev/sdb</code>としてiSCSIが認識されます。また先ほど導入したmultipathを確認すると</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">root@ansibletower:~# multipath -l
</span><span class="line">3600a0980383030525324464331596470 dm-0 NETAPP,LUN C-Mode
</span><span class="line">size=20G features='1 queue_if_no_path' hwhandler='0' wp=rw
</span><span class="line">|-+- policy='round-robin 0' prio=-1 status=active
</span><span class="line">| `- 0:0:0:186 sdb  8:16   active undef running
</span><span class="line">`-+- policy='round-robin 0' prio=-1 status=enabled
</span><span class="line">  `- 1:0:0:186 sda  8:0    active undef running</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>このようにFailover型でデバイスが登録されているのがわかります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">root@ansibletower:~#  fdisk -l | grep /dev/mapper
</span><span class="line">ディスク /dev/sdb は正常なパーティションテーブルを含んでいません
</span><span class="line">ディスク /dev/sda は正常なパーティションテーブルを含んでいません
</span><span class="line">ディスク /dev/mapper/3600a0980383030525324464331596470 は正常なパーティションテーブルを含んでいません
</span><span class="line">Disk /dev/mapper/3600a0980383030525324464331596470: 21.5 GB, 21474836480 bytes</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>device mapper経由では上記のデバイスとして認識されています。これ以降はこのデバイスに対してfdiskが有効なのでパーティションを作成して利用することに成ります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">root@ansibletower:~# lsblk
</span><span class="line">NAME                                       MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT
</span><span class="line">sda                                          8:0    0    20G  0 disk
</span><span class="line">└─3600a0980383030525324464331596470 (dm-0) 252:0    0    20G  0 mpath
</span><span class="line">sdb                                          8:16   0    20G  0 disk
</span><span class="line">└─3600a0980383030525324464331596470 (dm-0) 252:0    0    20G  0 mpath
</span><span class="line">xvda                                       202:0    0   100G  0 disk
</span><span class="line">├─xvda1                                    202:1    0   243M  0 part  /boot
</span><span class="line">└─xvda2                                    202:2    0  99.8G  0 part  /
</span><span class="line">xvdb                                       202:16   0     2G  0 disk
</span><span class="line">└─xvdb1                                    202:17   0     2G  0 part  [SWAP]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>fdiskでパーティションを作成し、カーネルにデバイスの変更を通知してxfsformatを行います。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">root@ansibletower:~# fdisk /dev/mapper/3600a0980383030525324464331596470
</span><span class="line">
</span><span class="line">root@ansibletower:~# partprobe
</span><span class="line">Error: /dev/sda: ディスクラベルが認識できません。
</span><span class="line">Error: /dev/sdb: ディスクラベルが認識できません。
</span><span class="line">Error: /dev/mapper/3600a0980383030525324464331596470p1: ディスクラベルが認識できません。
</span><span class="line">root@ansibletower:~# mkfs.xfs /dev/mapper/3600a0980383030525324464331596470p1
</span><span class="line">meta-data=/dev/mapper/3600a0980383030525324464331596470p1 isize=256    agcount=16, agsize=327663 blks
</span><span class="line">         =                       sectsz=4096  attr=2, projid32bit=0
</span><span class="line">data     =                       bsize=4096   blocks=5242608, imaxpct=25
</span><span class="line">         =                       sunit=1      swidth=16 blks
</span><span class="line">naming   =version 2              bsize=4096   ascii-ci=0
</span><span class="line">log      =internal log           bsize=4096   blocks=2560, version=2
</span><span class="line">         =                       sectsz=4096  sunit=1 blks, lazy-count=1
</span><span class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>実際にmountしてみる。恒久的に利用する場合には別途定義を行って下さい。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">root@ansibletower:~# mkdir /mnt/data1
</span><span class="line">root@ansibletower:~# mount /dev/mapper/3600a0980383030525324464331596470p1 /mnt/data1</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="iops">IOPS試験の実施</h1>

<p>簡単にするためにgistにスクリプトを置いています</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ apt-get install fio
</span><span class="line">$ apt-get install curl
</span><span class="line">$ export DISK=/mnt/data1 ; curl -s https://gist.githubusercontent.com/tokida/090eaa6475e58b4368c0/raw/fio_test.sh | sh</span></code></pre></td></tr></table></div></figure></notextile></div>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Benchmark</th>
      <th style="text-align: right">Bandwiddh</th>
      <th style="text-align: right">IOPS</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">4k, sequential read</td>
      <td style="text-align: right"> </td>
      <td style="text-align: right">147</td>
    </tr>
    <tr>
      <td style="text-align: left">4k, sequential write</td>
      <td style="text-align: right"> </td>
      <td style="text-align: right">165</td>
    </tr>
    <tr>
      <td style="text-align: left">4k, randam read</td>
      <td style="text-align: right"> </td>
      <td style="text-align: right">107</td>
    </tr>
    <tr>
      <td style="text-align: left">4k, randam write</td>
      <td style="text-align: right"> </td>
      <td style="text-align: right">103</td>
    </tr>
    <tr>
      <td style="text-align: left">32m, sequential read</td>
      <td style="text-align: right">51.871MB/s</td>
      <td style="text-align: right"> </td>
    </tr>
    <tr>
      <td style="text-align: left">32m, sequential write</td>
      <td style="text-align: right">12.221MB/s</td>
      <td style="text-align: right"> </td>
    </tr>
  </tbody>
</table>

<p>参考までに同じ試験項目でローカルディスク(100G SAN)を実施した場合</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Benchmark</th>
      <th style="text-align: right">Bandwiddh</th>
      <th style="text-align: right">IOPS</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">4k, sequential read</td>
      <td style="text-align: right"> </td>
      <td style="text-align: right">27362</td>
    </tr>
    <tr>
      <td style="text-align: left">4k, sequential write</td>
      <td style="text-align: right"> </td>
      <td style="text-align: right">26305</td>
    </tr>
    <tr>
      <td style="text-align: left">4k, randam read</td>
      <td style="text-align: right"> </td>
      <td style="text-align: right">14188</td>
    </tr>
    <tr>
      <td style="text-align: left">4k, randam write</td>
      <td style="text-align: right"> </td>
      <td style="text-align: right">22233</td>
    </tr>
    <tr>
      <td style="text-align: left">32m, sequential read</td>
      <td style="text-align: right">114.070MB/s</td>
      <td style="text-align: right"> </td>
    </tr>
    <tr>
      <td style="text-align: left">32m, sequential write</td>
      <td style="text-align: right">113.188MB/s</td>
      <td style="text-align: right"> </td>
    </tr>
  </tbody>
</table>

<h1 id="section-4">まとめ</h1>

<p>今回オーダしたのは100IOPSのBlock Storageになりますが、確かに100前後で制御されているように見えます。帯域はこれがMaxなのか分かりませんがこのあたりも今後確認していきたいところですね。</p>

<p>良かった点は、iSCSIがMultipathになった点でしょうか、とはいえ手軽さはNFS(FileStorage)での利用ですかね。また帯域が保証されているので6000IOPSを複数束ねてRaid0構成も出来るかもしれませんね。ただし結構費用が高いのが辛いかもしれないですが。12TByte(6000IOPS)の場合 $1,200+$720になるので $0.16/GByte となりますね。</p>

<p><img src="http://stepxstep.org/images/2014-09-17-iscsi02.png" alt="os" /></p>

<p>このパラメータが何を意味しているのか調べていないのですが<code>AIX</code>とかありますね！</p>

<p>悪かった点は、以前のiSCSIが抽象化された利便性の高いデバイスだったのですが今回はかなり素のiSCSIデバイスとしての利用になります。とくにSnapshotが使えないのは残念ですね。今回の場合にはこのiSCSIデバイスのバックアップをなにか考えなければいけません。12Tとか考えるとかなり面倒な感じですね。</p>

<h1 id="section-5">参考</h1>

<ul>
  <li><a href="http://knowledgelayer.softlayer.com/procedure/accessing-block-storage-consistent-performance-linux">Accessing Block Storage Consistent Performance on Linux</a></li>
  <li><a href="https://gist.githubusercontent.com/tokida/090eaa6475e58b4368c0/raw/738cec3a3dfa7816d65882c5d45d513e4a8cc160/fio_test.sh">FIO試験スクリプト</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XMLRPCに大量にアクセスされている場合の回避策]]></title>
    <link href="http://stepxstep.org/blog/2014/08/25/xml-rpc-ddos/"/>
    <updated>2014-08-25T11:28:00+09:00</updated>
    <id>http://stepxstep.org/blog/2014/08/25/xml-rpc-ddos</id>
    <content type="html"><![CDATA[<p>さてCPU使用率が100%になったりApacheのデーモンが大量に発生したりした場合どんな原因が考えられますか？
最近担当しているサーバからMemoryがいっぱいだよ、CPUがいっぱいだよとNew Relic経由でメールが届いたと思ったら触れなくなっていました。</p>

<p>調べてみるとhttpdが大量に起動してメモリがなくなりフォークしたプロセスがKillされている状態でした。標準の設定でhttpd.confを書いているのでそもそも大量にコネクションがあった場合（今回のようなケース）はメモリが足りないなという状態だったので計算をしみたところ一つあたり57MByteもメモリを使っているという富豪な設定になっていました。ApacheでLoadModuleされすぎです。（CentOSの標準パッケージの問題だと思いますが）</p>

<p>さて、そのようなことは横においておくとして今回の原因は xml-rpc.php に対して不特定の大量のアクセスが発生指定していることから起こっています。</p>

<p>以下の例は暫定で<code>xmlrpc.php</code>を削除しています。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">88.150.160.81 - - [23/Aug/2014:11:24:30 -0500] "POST /xmlrpc.php HTTP/1.1" 404 286 "-" "-"
</span><span class="line">172.245.37.220 - - [23/Aug/2014:11:24:31 -0500] "POST /xmlrpc.php HTTP/1.1" 404 286 "-" "-"
</span><span class="line">96.8.126.60 - - [23/Aug/2014:11:24:31 -0500] "POST /xmlrpc.php HTTP/1.1" 404 286 "-" "-"
</span><span class="line">109.104.118.82 - - [23/Aug/2014:11:24:31 -0500] "POST /xmlrpc.php HTTP/1.1" 404 286 "-" "-"
</span><span class="line">88.150.160.82 - - [23/Aug/2014:11:24:32 -0500] "POST /xmlrpc.php HTTP/1.1" 404 286 "-" "-"
</span><span class="line">172.245.221.237 - - [23/Aug/2014:11:24:32 -0500] "POST /xmlrpc.php HTTP/1.1" 404 286 "-" "-"
</span><span class="line">185.17.151.106 - - [23/Aug/2014:11:24:32 -0500] "POST /xmlrpc.php HTTP/1.1" 404 286 "-" "-"
</span><span class="line">217.78.5.180 - - [23/Aug/2014:11:24:32 -0500] "POST /xmlrpc.php HTTP/1.1" 404 286 "-" "-"
</span><span class="line">192.3.43.160 - - [23/Aug/2014:11:24:32 -0500] "POST /xmlrpc.php HTTP/1.1" 404 286 "-" "-"
</span><span class="line">96.8.123.95 - - [23/Aug/2014:11:24:34 -0500] "POST /xmlrpc.php HTTP/1.1" 404 286 "-" "-"
</span><span class="line">217.78.5.165 - - [23/Aug/2014:11:24:37 -0500] "POST /xmlrpc.php HTTP/1.1" 404 286 "-" "-"
</span><span class="line">^C</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section">対策</h3>

<p>幾つかの対策が考えられます。</p>

<ul>
  <li>XMLRPCの機能を無効化する（Wordpress3.5以降はディフォルトで有効になっているためソースを変更する必要がありそうです／VersionUp等の際にまた忘れる可能性があるので今回は選択しません）。</li>
  <li>プラグインで無効化（プラグインで無効化してもPHPが動くためCPUリソースは食べそうです）／これはこれで導入しておきましょう。</li>
  <li>接続可能なIPアドレスを制限する（今回はこれ）</li>
</ul>

<p>今回はこの3番目のアドレスで制限をしてみたいと思います。このサーバは、Public側とPrivate側に2つのネットワークインターフェースを持っているサーバとなっています。また設定についてはApacheだったので以下のようなディレクティブを追加することで対応が出来ます。</p>

<h3 id="section-1">設定内容</h3>

<ul>
  <li><code>httpd.conf</code>に以下を追記する。xmlrpc.php　は 10.0.0.0　からのアクセスのみ許可にする。</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;Files xmlrpc.php&gt;
</span><span class="line">    order deny,allow
</span><span class="line">    deny from all
</span><span class="line">    allow from 10.0.0.0/255.0.0.0
</span><span class="line">&lt;/Files&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>これでPrivateNetworki(10.0.0.0)側のみになりそれ以外は403でエラーになります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">172.245.37.225 - - [23/Aug/2014:11:35:55 -0500] "POST /xmlrpc.php HTTP/1.1" 403 290 "-" "-"
</span><span class="line">109.104.118.117 - - [23/Aug/2014:11:35:56 -0500] "POST /xmlrpc.php HTTP/1.1" 403 290 "-" "-"
</span><span class="line">109.104.118.82 - - [23/Aug/2014:11:35:56 -0500] "POST /xmlrpc.php HTTP/1.1" 403 290 "-" "-"
</span><span class="line">198.23.154.30 - - [23/Aug/2014:11:35:57 -0500] "POST /xmlrpc.php HTTP/1.1" 403 290 "-" "-"
</span><span class="line">109.104.118.117 - - [23/Aug/2014:11:35:57 -0500] "POST /xmlrpc.php HTTP/1.1" 403 290 "-" "-"
</span><span class="line">217.78.5.166 - - [23/Aug/2014:11:35:58 -0500] "POST /xmlrpc.php HTTP/1.1" 403 290 "-" "-"
</span><span class="line">109.104.118.131 - - [23/Aug/2014:11:35:58 -0500] "POST /xmlrpc.php HTTP/1.1" 403 290 "-" "-"
</span><span class="line">96.8.125.21 - - [23/Aug/2014:11:35:59 -0500] "POST /xmlrpc.php HTTP/1.1" 403 290 "-" "-"
</span><span class="line">217.78.5.165 - - [23/Aug/2014:11:35:59 -0500] "POST /xmlrpc.php HTTP/1.1" 403 290 "-" "-"
</span><span class="line">109.104.118.77 - - [23/Aug/2014:11:36:00 -0500] "POST /xmlrpc.php HTTP/1.1" 403 290 "-" "-"
</span><span class="line">^C</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-2">まとめ</h3>

<p>今回リソースはNewRelicで見ていましたがログまでは保管していなかったため問題が発生している際に状況を調べるのが面倒でした。というかCPU100%の状態を解消しないと見ることが出来ませんでした。キチンとFluentd等で別のログサーバにデータを転送しておきたいと思います。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serfを試してみる]]></title>
    <link href="http://stepxstep.org/blog/2014/08/22/first_serf/"/>
    <updated>2014-08-22T01:30:00+09:00</updated>
    <id>http://stepxstep.org/blog/2014/08/22/first_serf</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">はじめに</a></li>
  <li><a href="#section-1">導入</a></li>
  <li><a href="#section-2">起動</a>    <ul>
      <li><a href="#mdns">mDNSを利用したクラスタへのログイン</a></li>
    </ul>
  </li>
  <li><a href="#section-3">使い方</a>    <ul>
      <li><a href="#eventhandler">最初に各サーバに最初のEventHandlerのシェルを配置する</a></li>
    </ul>
  </li>
  <li><a href="#section-4">まとめ</a></li>
  <li><a href="#section-5">参考</a></li>
</ul>

<h1 id="section">はじめに</h1>

<p>Software Design 2014/09号に「Serf・Consul入門」が載っていたのでそれを参考に少し動かしてみました。また記事を書かれている @zenbutu さんのQiita上でのまとめを参考にしています。</p>

<ul>
  <li><a href="http://qiita.com/zembutsu/items/aaffab81f9d5b60d7ecc">SerfとConsulの記事まとめ - Qiita</a></li>
  <li><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00M7AWOJQ/ref=nosim?tag=maftracking33806-22&amp;linkCode=ure&amp;creative=6339">Software Design (ソフトウェア デザイン) 2014年 09月号</a></li>
</ul>

<h1 id="section-1">導入</h1>

<p><a href="http://www.serfdom.io/downloads.html">http://www.serfdom.io/downloads.html</a></p>

<p>上記から各サーバにあったものを落とす。
ここではUbuntu14.04を2台で試すので</p>

<p><a href="https://dl.bintray.com/mitchellh/serf/0.6.3_linux_amd64.zip">https://dl.bintray.com/mitchellh/serf/0.6.3_linux_amd64.zip</a></p>

<p>を利用する</p>

<pre><code>$ apt-get install unzip
$ wget https://dl.bintray.com/mitchellh/serf/0.6.3_linux_amd64.zip
$ unzip 0.6.3_linux_amd64.zip
$ cp ./serf /usr/bin/serf
</code></pre>

<p>バージョンの確認</p>

<pre><code>$ serf version
Serf v0.6.3
Agent Protocol: 4 (Understands back to: 2)
</code></pre>

<h1 id="section-2">起動</h1>

<p>バックグラウンドでの起動</p>

<pre><code>root@serf1:~# serf agent &amp;
[1] 10094
root@serf1:~# ==&gt; Starting Serf agent...
==&gt; Starting Serf agent RPC...
==&gt; Serf agent running!
         Node name: 'serf1'
         Bind addr: '0.0.0.0:7946'
          RPC addr: '127.0.0.1:7373'
         Encrypted: false
          Snapshot: false
           Profile: lan

==&gt; Log data will now stream in as it occurs:

    2014/08/21 18:31:15 [INFO] agent: Serf agent starting
    2014/08/21 18:31:15 [INFO] serf: EventMemberJoin: serf1 10.114.16.197
    2014/08/21 18:31:16 [INFO] agent: Received event: member-join
</code></pre>

<p>エージェントの確認／クラスタの状態の確認</p>

<pre><code>root@serf1:~# serf members
    2014/08/21 18:32:13 [INFO] agent.ipc: Accepted client: 127.0.0.1:44401
serf1  10.114.16.197:7946  alive
</code></pre>

<p>2台目のサーバで、上記のSerf導入後以下を実施</p>

<pre><code>root@serf2$ serf agent &amp;
root@serf1$ serf join 10.114.16.197 
    2014/08/21 18:35:05 [INFO] agent.ipc: Accepted client: 127.0.0.1:48145
    2014/08/21 18:35:05 [INFO] agent: joining: [10.114.16.197] replay: false
    2014/08/21 18:35:05 [INFO] serf: EventMemberJoin: serf1 10.114.16.197
    2014/08/21 18:35:05 [INFO] agent: joined: 1 nodes
Successfully joined cluster by contacting 1 nodes.
root@serf2:~#     2014/08/21 18:35:06 [INFO] agent: Received event: member-join
</code></pre>

<p>1台目でMemberの確認</p>

<pre><code>root@serf1:~# serf members
    2014/08/21 18:36:12 [INFO] agent.ipc: Accepted client: 127.0.0.1:44421
serf1  10.114.16.197:7946  alive
serf2  10.114.16.196:7946  alive
</code></pre>

<p>止める</p>

<pre><code>root@serf1:~# serf leave
    2014/08/21 18:44:31 [INFO] agent.ipc: Accepted client: 127.0.0.1:44457
    2014/08/21 18:44:31 [INFO] agent.ipc: Graceful leave triggered
    2014/08/21 18:44:31 [INFO] agent: requesting graceful leave from Serf
    2014/08/21 18:44:31 [INFO] serf: EventMemberLeave: serf1 10.114.16.197
    2014/08/21 18:44:31 [INFO] agent: requesting serf shutdown
    2014/08/21 18:44:31 [INFO] agent: shutdown complete
    2014/08/21 18:44:31 [WARN] agent: Serf shutdown detected, quitting
Error leaving: client closed
[1]+  終了                  serf agent
</code></pre>

<h2 id="mdns">mDNSを利用したクラスタへのログイン</h2>

<p>serfサーバをJoinするのにIPアドレスなどでしてしないでディスカバリーする。今回の環境はSoftLayerなのでマルチキャストDNS(mDNS)が通信できるためディスカバリーすることが出来ます。</p>

<p>先に2台とも停止しておく<code>serf leave</code></p>

<pre><code>root@serf1:~# ==&gt; Starting Serf agent...
==&gt; Starting Serf agent RPC...
==&gt; Serf agent running!
         Node name: 'serf1'
         Bind addr: '0.0.0.0:7946'
          RPC addr: '127.0.0.1:7373'
         Encrypted: false
          Snapshot: false
           Profile: lan
      mDNS cluster: serf

==&gt; Log data will now stream in as it occurs:

    2014/08/21 18:46:50 [INFO] agent: Serf agent starting
    2014/08/21 18:46:50 [INFO] serf: EventMemberJoin: serf1 10.114.16.197
    2014/08/21 18:46:51 [INFO] agent: joining: [10.114.16.197:7946] replay: false
    2014/08/21 18:46:51 [INFO] agent: joined: 1 nodes
    2014/08/21 18:46:51 [INFO] agent.mdns: Joined 1 hosts
    2014/08/21 18:46:51 [INFO] agent: Received event: member-join

root@serf1:~# serf members
    2014/08/21 18:47:01 [INFO] agent.ipc: Accepted client: 127.0.0.1:44467
serf1  10.114.16.197:7946  alive
</code></pre>

<p>次にserf2側でも実行</p>

<pre><code>root@serf2:~# ==&gt; Starting Serf agent...
==&gt; Starting Serf agent RPC...
==&gt; Serf agent running!
         Node name: 'serf2'
         Bind addr: '0.0.0.0:7946'
          RPC addr: '127.0.0.1:7373'
         Encrypted: false
          Snapshot: false
           Profile: lan
      mDNS cluster: serf

==&gt; Log data will now stream in as it occurs:

    2014/08/21 18:47:23 [INFO] agent: Serf agent starting
    2014/08/21 18:47:23 [INFO] serf: EventMemberJoin: serf2 10.114.16.196
    2014/08/21 18:47:23 [INFO] agent: joining: [10.114.16.196:7946 10.114.16.197:7946] replay: false
    2014/08/21 18:47:23 [INFO] serf: EventMemberJoin: serf1 10.114.16.197
    2014/08/21 18:47:23 [INFO] agent: joined: 2 nodes
    2014/08/21 18:47:23 [INFO] agent.mdns: Joined 2 hosts
    2014/08/21 18:47:24 [INFO] agent: Received event: member-join

root@serf2:~# serf members
    2014/08/21 18:47:31 [INFO] agent.ipc: Accepted client: 127.0.0.1:48185
serf2  10.114.16.196:7946  alive
serf1  10.114.16.197:7946  alive
</code></pre>

<h1 id="section-3">使い方</h1>

<p>このserfでは<code>Event</code>というものを使って処理ができるようになるのが特徴。その際の処理は<code>Event Handler</code>と言うものが担っている。</p>

<p>EventHander自体は、スクリプト等の実行コマンドで各サーバ上に事前に用意しておく必要がある。したがって複数の処理をしたい場合などはGitなど経由でダウンロードする仕組みを組み込んでいくほうが良いと思われる。</p>

<h2 id="eventhandler">最初に各サーバに最初のEventHandlerのシェルを配置する</h2>

<p>以下の内容で ~/event.sh を作成</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>event.sh </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c">#!/bin/sh </span>
</span><span class="line">
</span><span class="line"><span class="nv">LOG</span><span class="o">=</span>event.log
</span><span class="line">
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;-----&quot;</span> &gt;&gt; <span class="nv">$LOG</span>
</span><span class="line">hostname &gt;&gt; <span class="nv">$LOG</span>
</span><span class="line">date &gt;&gt; <span class="nv">$LOG</span>
</span><span class="line">env <span class="p">|</span>grep <span class="s2">&quot;^SERF&quot;</span> &gt;&gt; <span class="nv">$LOG</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>次に各serfを起動する。一旦<code>serf leave</code>で抜けておいて各サーバで以下のコマンドを実行する。</p>

<p>serf1側を、<code>-role=server</code>として serf2側を <code>-role=agent</code> として起動します。 </p>

<pre><code>serf agent -event-handler=./event.sh -discover=serf -role=&lt;ROLE&gt; &amp;
</code></pre>

<p>これにより、何らかのイベントが発行される都度に <code>event.sh</code>が実行されます。その際の書きだされる内容は</p>

<pre><code>root@serf1:~# tail -f event.log
SERF_EVENT=member-join
SERF_SELF_ROLE=
SERF_SELF_NAME=serf1
-----
serf1
2014年  8月 21日 木曜日 19:16:36 JST
SERF_EVENT=member-join
SERF_SELF_ROLE=server
SERF_TAG_ROLE=server
SERF_SELF_NAME=serf1
    2014/08/21 19:17:08 [INFO] serf: EventMemberLeave: serf2 10.114.16.196
    2014/08/21 19:17:09 [INFO] agent: Received event: member-leave
-----
serf1
2014年  8月 21日 木曜日 19:17:09 JST
SERF_EVENT=member-leave
SERF_SELF_ROLE=server
SERF_TAG_ROLE=server
SERF_SELF_NAME=serf1
    2014/08/21 19:17:27 [INFO] serf: EventMemberJoin: serf2 10.114.16.196
    2014/08/21 19:17:28 [INFO] agent: Received event: member-join
-----
serf1
2014年  8月 21日 木曜日 19:17:28 JST
SERF_EVENT=member-join
SERF_SELF_ROLE=server
SERF_TAG_ROLE=server
SERF_SELF_NAME=serf1
</code></pre>

<p>次に</p>

<pre><code>root@serf2:~# tail -f event.log
SERF_EVENT=member-join
SERF_SELF_ROLE=
SERF_SELF_NAME=serf2
-----
serf2
2014年  8月 21日 木曜日 19:17:28 JST
SERF_EVENT=member-join
SERF_SELF_ROLE=agent
SERF_TAG_ROLE=agent
SERF_SELF_NAME=serf2
</code></pre>

<p>つまり、このEventHandlerのスクリプトをゴニョゴニョすると色々出来ますね。という話です。任意のイベント名を指定して実行してみます。serf2から<code>event TEST</code>を実行します。</p>

<pre><code>root@serf2:~# serf event TEST
</code></pre>

<p>この時、serf1、serf2で同時に event.sh が実行されます。すると</p>

<pre><code>serf1
2014年  8月 21日 木曜日 19:27:16 JST
SERF_EVENT=user
SERF_SELF_ROLE=server
SERF_TAG_ROLE=server
SERF_USER_LTIME=3
SERF_SELF_NAME=serf1
SERF_USER_EVENT=TEST
</code></pre>

<p>のようなイベントな環境変数で実行されます。
これを利用して、XXXサーバ機能として Role/Tag/Serf_Nameを駆使してサーバを特定して特定の処理を実施すると良いことになりますね。</p>

<h1 id="section-4">まとめ</h1>

<p>ざっくり言えば、用意しておいスクリプトをクラスタ環境で実行することが出来る。実行はサーバが起動した際等にmember-joinした際に動くなど、複数のサーバ間で何かの処理をしたい時に同時に実行することが出来るのが面白い。</p>

<p>スクリプトへ渡されるものは、SERF＿EVENTの場合 msmber-* は、標準入力で引き渡されます。その際にはホスト名やIPアドレスを取得することが出来ます。またEventの場合には、引数で指定したデータが渡ります。</p>

<p><a href="http://qiita.com/foostan/items/5d61595b1b331a73b8c9">Dockerで試す、はじめてのSerf - Qiita</a></p>

<p>によるとEventHandlerをイベント事に指定することも出来るようなので色々出来そうです。反面、スクリプトを各サーバに用意しておく必要がありこの部分をプロビジョニング時にうまいことする必要もありそうですね。</p>

<h1 id="section-5">参考</h1>

<ul>
  <li><a href="http://pocketstudio.jp/log3/2014/04/01/serf_event_handlers/">イベントハンドラを整理してみる</a></li>
  <li><a href="http://blog.livedoor.jp/sonots/archives/35397486.html">正月休みだし Serf 触ってみた - sonots:blog</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SoftLayerでのAutoScale機能がリリース]]></title>
    <link href="http://stepxstep.org/blog/2014/08/20/softlayer-autoscale/"/>
    <updated>2014-08-20T22:45:00+09:00</updated>
    <id>http://stepxstep.org/blog/2014/08/20/softlayer-autoscale</id>
    <content type="html"><![CDATA[<p>SoftLayerにAutoScaleが発表されました。
先日からAPIにはScale関数が登場していたのですがようやく管理ポータル側から設定ができるようになっていました。</p>

<ul>
  <li>この文章はRelease後の検証のため誤りが含まれている可能性がありますのでご注意下さい。</li>
</ul>

<h1 id="section">これは何？</h1>

<p>SoftLayerのAutoScale機能についての説明</p>

<p>AutoScaleでは、トリガーの条件を元にサーバの台数を自動的に増やすことが出来る機能です。</p>

<p>トリガーには</p>

<ul>
  <li>CPU%の値</li>
  <li>毎日の時間</li>
  <li>特定の日時</li>
</ul>

<p>を選択することが出来ます。
またその際に実行できるアクションは</p>

<ul>
  <li>相対的にサーバを増やす（追加台数指定）</li>
  <li>指定の台数にする（固定）</li>
  <li>CPU%を指定する</li>
</ul>

<p>が選択できます。
これによって、朝6時に10台へ夜8時に1台に変更などという事が出来ます。またトリガーは複数選択できるためこの間もCPUに応じてAutoScaleを取ることが出来ます。</p>

<p>またAutoScaleの際には、Local Load Balancer（DataCenter内で利用可能なロードバランサーオプションの名前）に自動的に追加することが可能です。
これ意外にも、「Auto」ではなく「Manual」でスケールさせることも出来ます、これは便利そうです。</p>

<h1 id="section-1">使い方</h1>

<p>管理ポータル上から、<code>Devices</code> → <code>Auto Scale</code> を選択します。なにも設定がないので右上の <code>Add Auto Scale Group</code>より追加を行います。</p>

<p>設定値を記載しておきます。まだ全ての動作を見ていないので不明な箇所は※で記載しておきます。以下の設定をした後に右下の <code>Add Group</code>から構成を追加します。</p>

<h2 id="group-configuration">Group Configuration</h2>

<p>参考 <a href="http://knowledgelayer.softlayer.com/articles/auto-scale-terms">Auto Scale Terms</a></p>

<h3 id="group-details">Group Details</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: left">分類</th>
      <th style="text-align: left">設定値</th>
      <th style="text-align: left">値</th>
      <th style="text-align: left">補足</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Group Details</td>
      <td style="text-align: left">Group Name</td>
      <td style="text-align: left">グループの名前</td>
      <td style="text-align: left">ユニークになっていれば何でも良いみたい</td>
    </tr>
    <tr>
      <td style="text-align: left"> </td>
      <td style="text-align: left">Region</td>
      <td style="text-align: left">地域の選択</td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left"> </td>
      <td style="text-align: left">DataCenter</td>
      <td style="text-align: left">サーバを置くデータセンターを選択</td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left"> </td>
      <td style="text-align: left">Termination Policy</td>
      <td style="text-align: left">Closest to next Charge, Newest , Oldest</td>
      <td style="text-align: left">サーバをRemoveする際にどのサーバから消すかの指定</td>
    </tr>
    <tr>
      <td style="text-align: left">Network</td>
      <td style="text-align: left">Private Network Only</td>
      <td style="text-align: left">ON/OFF</td>
      <td style="text-align: left">プライベートのネットワークのみ利用</td>
    </tr>
    <tr>
      <td style="text-align: left"> </td>
      <td style="text-align: left">Private (VLAN)</td>
      <td style="text-align: left">VLAN名</td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left"> </td>
      <td style="text-align: left">Public (VLAN)</td>
      <td style="text-align: left">VLAN名</td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left">Group Setting</td>
      <td style="text-align: left">Minimum Member Count</td>
      <td style="text-align: left">最小の起動数</td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left"> </td>
      <td style="text-align: left">Maximum Member Count</td>
      <td style="text-align: left">最大の起動数</td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left"> </td>
      <td style="text-align: left">CloodDown Prelod</td>
      <td style="text-align: left">時間(min),Max 10day</td>
      <td style="text-align: left">AutoScale動作後の非監視期間（だと思う）</td>
    </tr>
  </tbody>
</table>

<h3 id="member-configuraion">Member Configuraion</h3>

<p>| 分類 | 設定値 | 値 | 補足 |
|:—-|:——|:–|:—-|</p>

<p>ここは一般的な仮想サーバのパラメータが指定可能、ホスト名とドメイン名が仮に<code>web</code>と<code>autoscale.com</code>だとすると実際にプロビジョニングされる際には<code>web-xxxxxx.autoscale.com</code>のような名称が割り振られる。ここでは <code>Provision Scirpt</code>が指定可能。</p>

<h3 id="policies">Policies</h3>

<p>Policyは何個でも作ることが出来る</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">分類</th>
      <th style="text-align: left">設定値</th>
      <th style="text-align: left">値</th>
      <th style="text-align: left">補足</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Policy Details</td>
      <td style="text-align: left">PolicyName</td>
      <td style="text-align: left">必須</td>
      <td style="text-align: left"> </td>
      <td> </td>
    </tr>
    <tr>
      <td style="text-align: left"> </td>
      <td style="text-align: left">Cooldown Preiod</td>
      <td style="text-align: left">0(min)-10(day)</td>
      <td style="text-align: left">全体の設定を利用するか、個別に作るか</td>
      <td> </td>
    </tr>
    <tr>
      <td style="text-align: left">Triggers</td>
      <td style="text-align: left">指定</td>
      <td style="text-align: left">CPU%を指定可能( 30%以上や10%以下等,複数組みあせ可能）,特定の曜日, 特定の期間</td>
      <td style="text-align: left"> </td>
      <td> </td>
    </tr>
    <tr>
      <td style="text-align: left">Action</td>
      <td style="text-align: left">Scale By</td>
      <td style="text-align: left">Exact(固定) , Relative(相対的に), Percentage(%)</td>
      <td style="text-align: left">値は符号なしの場合「増加」、マイナス符号の場合「削減」となる</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h3 id="local-load-balancers">Local Load Balancers</h3>

<p>| 分類 | 設定値 | 値 | 補足 |
|:—-|:——|:–|:—-|</p>

<ul>
  <li>あとで時間が有る時に追記する</li>
</ul>

<hr />

<p>Policiesでは、どの様に増やすのかが指定可能です。設定できるLoadBalancersは<code>Local Load Balancers</code>のみですが基本的には問題無いと思います。指定したLBに自動的に組み込みが行われます。</p>

<h1 id="section-2">実験</h1>

<h2 id="section-3">その1</h2>

<p>最初にプロビジョニングされたサーバ上でcpuを100%にするスクリプトを実施</p>

<ul>
  <li>Termination Policy : Newest</li>
  <li>Cooldown Period : 3min</li>
  <li>指定したポリシー：80%以上3分間経過すると「Relatively 1 Members」（相対的に1つ追加）</li>
  <li>LLB: 80番ポート、ヘルスチェックはDefaultを指定</li>
</ul>

<p>この状態でCPUを100%にすることで1台が追加されます。
合計にすると追加後は全体で平均CPU使用率50%(100%+0%)になっているはずです。したがって動きとしては3分後に1台追加 ~~ 、その後 3分で Cooldown し新しい方が消える（Terminate）予定です。 ~~ この設定の場合全体で80%以下になるまで1台づつAutoscaleで増加</p>

<p>結果</p>

<ul>
  <li>3分後に1台が追加</li>
  <li>6分後特に変化なし（2台のまま継続)</li>
  <li>その後経か無いため1台目のCPUを0%に変更</li>
  <li>~~ 30分放置したが結果変わらず ~~ これで正しい</li>
  <li>~~ LogにもCooldownしたとかそういう結果は出てこない（事が正しのか不明だ） ~~ 正しいCooldown経過後の数値はログに出て欲しいが出ない</li>
</ul>

<p>そもそもTerminateの指定は削除の指定であるのか、CPUの使用率は台数分の平均値なのか等が不明。</p>

<h2 id="section-4">その2</h2>

<p>最初にプロビジョニングされたサーバ上でcpuを100%にするスクリプトを実施</p>

<ul>
  <li>Termination Policy : oldest</li>
  <li>Cooldown Period : 3min</li>
  <li>指定したポリシー：30%以上3分間経過すると「Relatively 1 Members」（相対的に1つ追加）</li>
  <li>LLB: 80番ポート、ヘルスチェックはDefaultを指定</li>
</ul>

<p>この状態でCPUを100%に1:することで1台が追加されます。</p>

<p>結果</p>

<ul>
  <li>CPUは平均で30%なのか3までAutoScaleで起動、ログからは13分単位で追加されてる</li>
  <li>これにより監視しているCPUは合計の平均値であることは確実のようです。</li>
  <li>その後変化なし</li>
</ul>

<h2 id="section-5">その3</h2>

<ul>
  <li>Termination Policy : oldest</li>
  <li>Cooldown Period : 3min</li>
  <li>指定したポリシー：30%以下3分間経過すると「Relatively -1 Members」（相対的に1つ削減）</li>
  <li>LLB: 80番ポート、ヘルスチェックはDefaultを指定</li>
</ul>

<p>前提として「その2」の状態である</p>

<p>結果</p>

<ul>
  <li>CPUの使用を0.x%にする</li>
  <li>その後1台づつ terminate policyに従い削除される</li>
</ul>

<h1 id="section-6">まとめ</h1>

<ul>
  <li>一番最初上手くCPUを100にしても動いていませんでしたがその後動きました。Nimsoftは導入されていない状態のサーバがデプロイされています(CentOS)</li>
  <li>~~ 2014/08/21 増えたサーバの「始末」をどうするのか？Termination Policy動いている？よくわからない ~~</li>
  <li>問題なく増加、削除が可能である</li>
  <li>トリガー条件でスケジュールベースが選択できることは便利</li>
  <li>監視トリガーで全体で%の指定が可能なので余力を常に確保するようにAutoScale出来る</li>
  <li>手動で設定の変更ことなしに「QuickScale」が出来るのは面白い</li>
  <li>Regionの名前が初めて出てきた気がします。香港の場合には「as-hkg-central-1」そしてその中のDataCenter名が「Hong Kong2」という構成ですね。</li>
</ul>

<h1 id="section-7">参考</h1>

<ul>
  <li>@urasoko 氏のレポート：<a href="https://medium.com/@urasoko/softlayer-introduces-auto-scale-f91e0bae2a89">SoftLayer Introduces Auto Scale — Medium</a>
  こちらを見ると色々Linkがありました。珍しくAutoScaleはドキュメントがあるなぁ。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Desing 2014年9月号に寄稿しました]]></title>
    <link href="http://stepxstep.org/blog/2014/08/17/write-first/"/>
    <updated>2014-08-17T07:50:00+09:00</updated>
    <id>http://stepxstep.org/blog/2014/08/17/write-first</id>
    <content type="html"><![CDATA[<h1 id="section">はじめに</h1>

<p>IT系で仕事をしていて若い時にずっと読んでいた「Software Design」に寄稿する機会を得ました。
お世話になっているIBMの 北瀬さん(@kkitase)に監修していただきながらのお仕事でした。
それにしても非常に嬉しいです。 なにせインターネットが始まった頃の1995年頃からお世話になって読んでいた雑誌です。そんな雑誌に自分の書いた文章が載るとは思わなかった。編集長の 池本さん(@XR230) にお会いできたのも感激。</p>

<h1 id="whats-softlayer-">What’s SoftLayer ?</h1>

<p>今回のテーマは、「SoftLayerを使ってみませんか？」という内容で全3回の連載となっています。</p>

<p>「ベアメタルクラウド」勢という括りでいいかは分からないけど物理（ベアメタル）サーバをクラウドで利用できるIBMのパブリッククラウドの使いこなしが話しのテーマです。昨年IBMは自社の持っていた SmaterCloud をやめて米SoftlayerTechnology.Incを買収しました。私自身はそのタイミングから少しつづ触ってきて今年になって本格的に使っているという感じです。</p>

<h1 id="section-1">マニアックなクラウド環境</h1>

<p>実際なんというかアバウトです。</p>

<p>当たり前なんですがベアメタルをオーダーした場合、仮に部品がない場合には仕様を満たす別のハードウェアが搭載されます。まあ変な話32GのSSDを注文したら1TのSSDが来たりします。HDDなんかは別にいいけどCPUとかだとライセンスの問題とかあって結構面倒な話にもなったりしていました。</p>

<p>このベアメタルサーバは、SoftLayerの代表的なサービスです。もちろん一般的なクラウド同様の仮想サーバも用意されています。ベアメタルはかなり自由に使うことが出来ます。その分、色々自分で面倒を見る必要があるのはオンプレで構築した時と同じですがESXiを導入できたり自社のデータセンターの代わりとして十分に使う事が出来る能力が有るのかなと思っています。</p>

<p>SoftLayerを何に使うかと考えた場合、もうここまで来るとすることは一つ(?)です。SoftLayerのクラウド基盤を使ってクラウドを作るのです。それはVMwareでも良いしOpenStackや最近はやりのDockerでも良いかもしれない。SoftLayerは純粋なIaaSをわずか4,5時間で用意してくれ今まで面倒だったストレージの障害対応や電源の問題とか場所の問題とかそういったことを全て解決してくれています。素にちかい環境で物理と仮想が手に入るので色々と何をしてみようかと夢が広がります。</p>

<p>残念なことにサイト全体を見渡しても通読できるマニュアルは見当たりません。情報が断片的に落ちているだけです。この状況で色々触っていくうちに少しづつ理解しつつあるかなというのが現状です。もうこの段階でかなりマニアックな領域になってきていますが。</p>

<h1 id="softlayer--ibm-">SoftLayer + IBM への期待</h1>

<p>インフラエンジニアの立場からSoftLayerが非常に興味深いものではありますがアプリケーション開発の観点からはミドルウェア的に利用できる各種のサービスが整っているほうが開発の効率をあげることにつながります。仮にスケーラブルなMySqlをSoftLayer上で構築するとしたらインフラ的には普通に重労働です。これでは意味が無いです。そういった意味でIBM BluMixの環境（こちらではスケーラブルなDBなどがすでにラインナップされている）とSoftLayerのインフラストラクチャーが上手く融合するとインフラ面でも開発面でも良い成果が出てきそうです。今後、クラウドのサービス展開としてPaaS,SaaS側への拡張が楽しみです。</p>

<p>あ、年内にTokyo DataCenter が出来る予定ですね。海外のJobサイトみるとSoftLayer,IBMでDataCenter Manager／Specialistの募集してますね〜</p>

<h1 id="section-2">まとめ</h1>

<p>どこまでSoftLayerの魅力を伝えるには力及ばずなのですが3回ほど連載の予定ですのでソフトウェアデザインを購入されてる際には一読してもらえると嬉しいです。</p>

<div class="booklink-box"><div class="booklink-image"><a href="http://c.af.moshimo.com/af/c/click?a_id=187314&amp;p_id=170&amp;pc_id=185&amp;pl_id=4062&amp;s_v=b5Rz2P0601xu&amp;url=http%3A%2F%2Fwww.amazon.co.jp%2Fexec%2Fobidos%2FASIN%2FB00M7AWOJQ%2Fref%3Dnosim" rel="nofollow" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51f%2BNfl-h-L._SL160_.jpg" style="border: none;" /></a></div><div class="booklink-info"><div class="booklink-name"><a href="http://c.af.moshimo.com/af/c/click?a_id=187314&amp;p_id=170&amp;pc_id=185&amp;pl_id=4062&amp;s_v=b5Rz2P0601xu&amp;url=http%3A%2F%2Fwww.amazon.co.jp%2Fexec%2Fobidos%2FASIN%2FB00M7AWOJQ%2Fref%3Dnosim" target="_blank">Software Design (ソフトウェア デザイン) 2014年 09月号 [雑誌]</a></div><div class="booklink-powered-date">posted with <a href="http://yomereba.com" rel="nofollow" target="_blank"> ヨメレバ</a></div><div class="booklink-detail"> 技術評論社 2014-08-18</div><div class="booklink-rank">売り上げランキング : <br /></div></div><div class="booklink-footer" style=""></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1分でDocker環境を構築する Docker on DigitalOcean]]></title>
    <link href="http://stepxstep.org/blog/2014/08/09/firstdocker/"/>
    <updated>2014-08-09T23:49:00+09:00</updated>
    <id>http://stepxstep.org/blog/2014/08/09/firstdocker</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#docker">素早くDocker環境を用意する</a></li>
  <li><a href="#section">はじめに</a></li>
  <li><a href="#section-1">使い方</a></li>
  <li><a href="#section-2">まとめ</a></li>
</ul>

<h1 id="docker">素早くDocker環境を用意する</h1>

<p>普段から検証で利用したりしているクラウドのサービスに DigitalOcean というサービスがあります。
格安のSSD VPSとして有名ですが確かに安い、そして「早い」です。代替最小の構成で1〜2分でプロビジョニングされます。</p>

<ul>
  <li><a href="https://www.digitalocean.com/pricing/">費用</a></li>
</ul>

<p>みてもらうとわかりますが、最小モデル(512M Memory, 1Core , 2OG SSD)で $0.007/hr($5/month) です。HighPerformanceの最小構成(16GB Memory,8Core,160GB SSD)で $0.238/hr($160/mo) となっています。さっと検証をしたい程度1日程度であれば非常に安く利用することが出来ます。</p>

<h1 id="section">はじめに</h1>

<p>現在(2014/08/09)、$10分のクーポンがあるので更に利用が便利になります。すでにアカウントがある人はポータル画面の左メニュー<code>Billing</code>から右上の<code>Manage Payment</code>を選択ししたの<code>Promo Code</code>に入力をします。</p>

<ul>
  <li>CODE:<code>SHIPITFAST10</code></li>
</ul>

<p>もしアカウントがまだの場合には、こちらのリンクからはじめてもらえると私が嬉しいです。</p>

<ul>
  <li><a href="https://www.digitalocean.com/?refcode=fb56d3391881">DigitalOcean</a></li>
</ul>

<h1 id="section-1">使い方</h1>

<p>ポータルから作るのは非常に簡単ですが実際にDocker利用したいと思うとコマンドラインからすると思われるのでここではVagrantを利用してサーバのデプロイをしたいと思います。</p>

<ul>
  <li><a href="https://github.com/smdahlen/vagrant-digitalocean">smdahlen/vagrant-digitalocean</a></li>
</ul>

<p>すでにVagrantの環境は入っているものとします。（まだの方は色々ぐぐってみてください）
以前に入れたままの人はバージョンアップがされているので実行しておきましょう。</p>

<p>古いバージョンではUsername,APIキーと言う形式でしたが現在はToken形式で利用することになります。ポータルからトークンは発行することが出来ます。</p>

<p>$ vagrant plugin install vagrant-digitalocean</p>

<p>実際のVagrantfileのサンプルを以下に載せておきます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Vagrantfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="docker"><span class="line"><span class="c"># -*- mode: ruby -*-</span>
</span><span class="line"><span class="c"># vi: set ft=ruby :</span>
</span><span class="line"><span class="c"># vagrant up --provider=digital_ocean --provision</span>
</span><span class="line">
</span><span class="line">Vagrant.configure<span class="o">(</span><span class="s1">&#39;2&#39;</span><span class="o">)</span> <span class="k">do</span> <span class="p">|</span>config<span class="p">|</span>
</span><span class="line">  config.vm.hostname              <span class="o">=</span> <span class="s1">&#39;docker01&#39;</span>
</span><span class="line">
</span><span class="line">  config.vm.provider :digital_ocean <span class="k">do</span> <span class="p">|</span>provider, override<span class="p">|</span>
</span><span class="line">    override.ssh.private_key_path <span class="o">=</span> <span class="s1">&#39;~/.ssh/admin&#39;</span>
</span><span class="line">    override.vm.box               <span class="o">=</span> <span class="s1">&#39;digital_ocean&#39;</span>
</span><span class="line">    override.vm.box_url           <span class="o">=</span> <span class="s2">&quot;https://github.com/smdahlen/vagrant-digitalocean/raw/master/box/digital_ocean.box&quot;</span>
</span><span class="line">    provider.token                <span class="o">=</span> <span class="s1">&#39;TOKEN&#39;</span>
</span><span class="line">    provider.image                <span class="o">=</span> <span class="s1">&#39;Docker 1.1.2 on Ubuntu 14.04&#39;</span>
</span><span class="line">    provider.region               <span class="o">=</span> <span class="s1">&#39;LON1&#39;</span>
</span><span class="line">    provider.size                 <span class="o">=</span> <span class="s1">&#39;512MB&#39;</span>
</span><span class="line">    provider.ca_path              <span class="o">=</span> <span class="s1">&#39;/usr/local/opt/curl-ca-bundle/share/ca-bundle.crt&#39;</span>
</span><span class="line">    provider.ssh_key_name         <span class="o">=</span> <span class="s1">&#39;admin&#39;</span>
</span><span class="line">  end
</span><span class="line">
</span><span class="line">end
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>1分で起動が売りなのですが上記の設定で「<code>46秒！</code>」で起動してきます（ポータル上に表示されている時間）
起動は普段通り、<code>$ vagrant up --provider=digital_ocean --provision</code> で行うことが出来ます。</p>

<p>接続して確認してみます。</p>

<pre><code>$ vagrant ssh
Welcome to Ubuntu 14.04.1 LTS (GNU/Linux 3.13.0-24-generic x86_64)

* Documentation:  https://help.ubuntu.com/

System information as of Sat Aug  9 16:55:12 EDT 2014

System load:  0.2               Processes:              76
Usage of /:   8.0% of 19.56GB   Users logged in:        0
Memory usage: 13%               IP address for eth0:    178.62.17.227
Swap usage:   0%                IP address for docker0: 172.17.42.1

Graph this data and manage this system at:
  https://landscape.canonical.com/

Last login: Tue Aug  5 15:18:31 2014 from 162.243.14.86
root@docker01:~# docker version
Client version: 1.1.2
Client API version: 1.13
Go version (client): go1.2.1
Git commit (client): d84a070
Server version: 1.1.2
Server API version: 1.13
Go version (server): go1.2.1
Git commit (server): d84a070
</code></pre>

<p>Dockerが動いている状態になっていますね！</p>

<h1 id="section-2">まとめ</h1>

<p>というわけでわずか1分で環境が用意することが出来ました。
実際に利用してみると便利さがわかります。開発環境で使う分には十分ですね。というかローカルの環境でVirtualBoxで起動する時間以下でネット上にサーバが構築されるとか結構感動です。</p>

<p>プライベートレポジトリを併用して使えば必要なときに使うという使い方が出来て非常に便利です。Vagrant経由で実行することでAnsibleなどを併用すればその辺りもある程度自動化出来ますね。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SoftLayerのObjecｔStorageへファイルバックアップを行う slbackup.py を試す]]></title>
    <link href="http://stepxstep.org/blog/2014/08/09/softlayerobjectstoragebackup/"/>
    <updated>2014-08-09T07:39:00+09:00</updated>
    <id>http://stepxstep.org/blog/2014/08/09/softlayerobjectstoragebackup</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">これは何？</a></li>
  <li><a href="#section-1">使い方</a></li>
  <li><a href="#section-2">まとめ</a></li>
</ul>

<h1 id="section">これは何？</h1>

<p>github上で見つけた ObjectStorageにバックアップをするためのスクリプト。
メジャーなIaaS環境では結構ObjecｔStorageがサポートされているし、値段的にも非常に安いのでObjecｔStorageにデータバックアップを取る手法を持っていたほうがいいですね。</p>

<ul>
  <li>Whole file delta backups - only changed/new files are uploaded saving you time/bandwidth.</li>
  <li>Retention policies - deleted/updated files are kept for any desired length of time. These can also be disabled.</li>
  <li>Threaded - Copying can always be the longest part, so backups are done in the background as file comparisions are being performed.</li>
  <li>MD5 support - Swift automatically sets a default hash (md5) for every object. We support file comparisions using this hash instead of time/size variance.</li>
  <li>Open source - MIT licensed (as is the object storage library).</li>
</ul>

<h1 id="section-1">使い方</h1>

<p>gitからソースを取得する</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ git cline https://github.com/softlayer/softlayer-object-storage-backup.git
</span><span class="line">$ sudo pip install softlayer-object-storage
</span><span class="line">$ sudo pip install slbackup</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>設定の実施</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ./slbackup.py --example &gt; ~/.slbackup</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>設定ファイルの中に、username, apikey を設定します。またObjectStorageのどのデータセンターを利用するかも指定することが出来ます。</p>

<p>カレントディレクトリ以下を<code>test</code>というコンテナに格納するのは以下のコマンドで実施できます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ./slbackup.py -s ./ -o test</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-2">まとめ</h1>

<p>機能的に変更分のみ、マルチスレッド対応なのでPerformanceも期待できるのだろうか。実際の運用を想定すると、(a) Restore (b) 履歴（世代）管理 (c) 圧縮 などの機能があると嬉しいですね。日本語のファイルなどはそのまま ObjectStorageに入れると文字コードなど問題ですこし不安です。とは言えこのスクリプトは簡単にバックアップを実現するという意味で現在全く利用していないユーザなどには良いと思います。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ansible 1.7 External Inventory SoftLayerを試してみる]]></title>
    <link href="http://stepxstep.org/blog/2014/08/09/ansible-softlayer/"/>
    <updated>2014-08-09T02:17:00+09:00</updated>
    <id>http://stepxstep.org/blog/2014/08/09/ansible-softlayer</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">何が出来るの？</a></li>
  <li><a href="#section-1">準備</a></li>
  <li><a href="#section-2">プラグインの実行</a></li>
  <li><a href="#section-3">使ってみる</a>    <ul>
      <li><a href="#tips">Tips</a></li>
    </ul>
  </li>
  <li><a href="#section-4">まとめ</a></li>
</ul>

<h1 id="section">何が出来るの？</h1>

<p>Ansible 1.7 より 外部インベントリ（Dynamic Inventory）に SoftLayerのプラグインがCommitされていました。外部インベントリとして利用できるため Ansible の hosts を記載しなくても動的に SoftLayerの管理ポータル上からサーバのリスト等が取得できるはずです。どのような感じで利用できるのか試してみます。</p>

<h1 id="section-1">準備</h1>

<p>古いバージョンの場合には Ansible 1.7 にアップデートします。今回はUbuntu上の環境でpipで過去のバージョンを導入している場合です。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo pip install ansible --upgrade</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>不勉強なので分かっていないですが pip で入れると pluginが入らないので（何かどこかに入るのかもしれませんが）自分でダウンロードしておきます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ git clone https://github.com/ansible/ansible.git
</span><span class="line">$ cd ansible/plugins/inventory
</span><span class="line">$ ls -l softlayer.py
</span><span class="line">-rwxrwxr-x 1 vagrant vagrant 6112 Aug  8 03:03 softlayer.py</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>また、SoftLayer CLIが利用可能になっている必要があるので導入をしておきます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo pip install softlayer
</span><span class="line">$ sl config setup</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>SoftLayerの管理ポータルから、USER名、APIキーを控えておきセットアップします。slコマンドが利用できるようになっている必要があります。</p>

<h1 id="section-2">プラグインの実行</h1>

<p>プラグインを単体で実行してみます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ./softlayer.py --list
</span><span class="line">{
</span><span class="line">  "_meta": {
</span><span class="line">    "hostvars": {
</span><span class="line">      "119.81.131.10": {
</span><span class="line">        "datacenter": {
</span><span class="line">          "id": 352494,
</span><span class="line">          "longName": "Hong Kong 2",
</span><span class="line">          "name": "hkg02"
</span><span class="line">        },
</span><span class="line">        "domain": "niandc.co.jp",
</span><span class="line">        "fullyQualifiedDomainName": "kensyu05.niandc.co.jp",
</span><span class="line">        "globalIdentifier": "461a86f4-3e4f-4b78-90df-9207d2337ee4",
</span><span class="line">        "hostname": "kensyu05",
</span><span class="line">        "id": 5509848,
</span><span class="line">        "maxCpu": 1,
</span><span class="line">        "maxMemory": 1024,
</span><span class="line">        "powerState": {
</span><span class="line">          "keyName": "RUNNING",
</span><span class="line">          "name": "Running"
</span><span class="line">        },
</span><span class="line">        "primaryBackendIpAddress": "10.x.x.x",
</span><span class="line">        "primaryIpAddress": "119.81.x.x",
</span><span class="line">        "status": {
</span><span class="line">          "keyName": "ACTIVE",
</span><span class="line">          "name": "Active"
</span><span class="line">        }
</span><span class="line">      },</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>という形でホストの情報が出てくるとともに以下のグルーピングでもJSONが返ってきています。</p>

<ul>
  <li>cpu_“数”</li>
  <li>datacenter_“DC名”</li>
  <li>“HOSTNAME”</li>
  <li>“HOSTNAME”.”DOMAINNAME”&gt;</li>
  <li>hardware</li>
  <li>virtual</li>
  <li>memory_“サイズ”</li>
  <li>“DOMAINNAME”</li>
</ul>

<p>などです。これらはいずれも</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> "datacenter_sng01": [
</span><span class="line">    "119.81.xx.x",
</span><span class="line">    "119.81.xx.x",
</span><span class="line">    "119.81.xx.x",
</span><span class="line">    "119.81.xx.x"
</span><span class="line">  ],</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>のような形でIPアドレスが応答されます。</p>

<h1 id="section-3">使ってみる</h1>

<p>先ほどのJSON形式が渡されるためどうもIPアドレスで sshの設定が必要になりそうです。したがって ~/.ssh/confg内にてIPアドレスでログイン出来るように設定しておきます。パスワードありで接続する場合、<code>-k</code>または<code>--ask-pass --ask-sudo-pass</code>などを引数につけます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ansible -i `pwd`/softlayer.py docker02 -u root -m ping -k
</span><span class="line">SSH password:
</span><span class="line">119.81.x.x | success &gt;&gt; {
</span><span class="line">    "changed": false,
</span><span class="line">    "ping": "pong"
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>このようにPingが実行できました。同様に <code>all</code> や <code>datacenter_hkg02</code> 等の括りで制御する事が出来ます。</p>

<h2 id="tips">Tips</h2>

<p>常にこの <code>softlayer.py</code> を指定するには</p>

<ul>
  <li>softlayer.py を <code>/etc/ansible/hosts</code>に上書き</li>
  <li>環境変数ANSIBLE_HOSTSに softlayer.py を指定</li>
</ul>

<p>の2通りの方法があります。</p>

<h1 id="section-4">まとめ</h1>

<p>台数が多くなると便利な Ansible の External Inventory ですが、SoftLayerのプラグインが出ていることでより簡単に利用することが出来るように成りました。 データセンター単位やドメイン単位で変更が発生する際などは特に便利そうですね。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iTerm(2バイトオプション)+Tmuxでステータスがズレるのを修正しbrewでInstallする]]></title>
    <link href="http://stepxstep.org/blog/2014/07/06/iterm+tmux/"/>
    <updated>2014-07-06T00:53:00+09:00</updated>
    <id>http://stepxstep.org/blog/2014/07/06/iterm+tmux</id>
    <content type="html"><![CDATA[<p>iTermを利用していて「Treat ambiguous-width characters as double width」をONにしているとTmux+Powerlineのステータスがズレてしまう問題がありました。
チェックをOFFにしていると問題がないのですが日本語を多様していることもありググってみました。</p>

<ul>
  <li>http://ta.ps.st/d/1350718711.html</li>
</ul>

<p>こちらは少し古いのですがこれで解消が出来ました。</p>

<ul>
  <li><a href="https://gist.github.com/tokida/997cf6b608d93ccbefef#file-tmux_utf8-patch">tmux_utf8.patch</a></li>
</ul>

<p>Tmux1.9に対してのpatch形式にしたのをgistにあげておきます。</p>

<p>さて、tmuxはhomebrewで導入しているのでこちらから修正して導入できるようにしておきます。brewコマンドはsourceからのコンパイルする際にpatchなどの適応ができるので追記してみます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ brew edit tmux</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>これで以下のように修正します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">23   depends_on 'pkg-config' =&gt; :build
</span><span class="line">24   depends_on 'libevent'
</span><span class="line">25
</span><span class="line">26   def patches
</span><span class="line">27     [
</span><span class="line">28         "https://gist.githubusercontent.com/tokida/997cf6b608d93ccbefef/raw/63219743ec84b255a975f230593895dbdad9f364/tmux_utf8.patch"
</span><span class="line">29     ]
</span><span class="line">30   end
</span><span class="line">31
</span><span class="line">32   def install
</span><span class="line">33     system "sh", "autogen.sh" if build.head?</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>先ほどのパッチを指定しておきます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">brew install --build-from-source tmux</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上記のコマンドオプションを実行することによりsourceからリビルドされます。
最近これでズレまくって嫌になっていたのですがまたtmuxに戻って見たいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mailman + Postfix + Nginx on Ubuntu SoftLayer]]></title>
    <link href="http://stepxstep.org/blog/2014/07/04/mailman/"/>
    <updated>2014-07-04T16:34:00+09:00</updated>
    <id>http://stepxstep.org/blog/2014/07/04/mailman</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#goal">Goal</a></li>
  <li><a href="#install">Install</a>    <ul>
      <li><a href="#section">はじめに</a></li>
      <li><a href="#section-1">ドメイン名</a></li>
      <li><a href="#dns">DNSへの登録</a></li>
    </ul>
  </li>
  <li><a href="#install-1">Install</a>    <ul>
      <li><a href="#postfix">Postfix</a></li>
      <li><a href="#fcgiwrap">fcgiwrap</a></li>
      <li><a href="#mailman">Mailman</a></li>
      <li><a href="#nginx">Nginx</a></li>
    </ul>
  </li>
  <li><a href="#section-2">使ってみる</a></li>
  <li><a href="#section-3">ハマった点</a></li>
  <li><a href="#section-4">まとめ</a></li>
</ul>

<h1 id="goal">Goal</h1>

<p>個人用のメーリングリストを構築する</p>

<h1 id="install">Install</h1>

<h2 id="section">はじめに</h2>

<p>個人で安く抑えたい場合には digital Ocean (https://www.digitalocean.com/pricing/) が快適で結構オススメです。$5/moで1core,521MB,20GB(SSD Disk),1T Transferなのでメーリングリスト等の簡易な用途であれば十分にこなしてくれそうです。今回はこれ意外にもOwnCloudなどを入れたかったのでSoftLayer (http://www.softlayer.com) のCloud Compute Instanceで利用してみました。一番安いノードで$25/moで 1core,1GB,25Gですね、すこし高いです。</p>

<h2 id="section-1">ドメイン名</h2>

<p>メーリングリストを始めるためにあたり今回は独自ドメインが欲しかったので色々あるので安いところから購入するのが良いかと思います。注意が必要なのはドメインを取得すると利用者の住所などの情報がwhoisで公開されるのですがこれをレジストラの業者が代行して表示してくれるサービスがあります。この対象となるドメインが業者により異なるので気をつけましょう。</p>

<h2 id="dns">DNSへの登録</h2>

<p>SoftLayerのDNSサービスがありますのでこちらを利用していきます。ドメイン業者側のコントロールパネルなどの設定でNSを以下の2つに変更します。</p>

<ul>
  <li>ns1.softlayer.com</li>
  <li>ns2.softlayer.com </li>
</ul>

<p>すこし待てばSoftlayer側のDNS登録画面で登録した情報が利用されます。
次に、Softlayer側で構築するサーバを登録します。ネットワーク設定の画面でドメイン名(mailabcd.net)と対象となるサーバのIPアドレス(119.81.xxx.xx1)を入れると自動で幾つかの値がセットされます。不要な項目を消して消して置けば良いと思います。TTLは短くしておけば最初に伝搬されます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ORIGIN mailabcd.net.
</span><span class="line">$TTL 900
</span><span class="line">@ IN SOA ns1.softlayer.com. support.softlayer.com. (
</span><span class="line">                       2014070307        ; Serial
</span><span class="line">                       7200              ; Refresh
</span><span class="line">                       600               ; Retry
</span><span class="line">                       1728000           ; Expire
</span><span class="line">                       43200)            ; Minimum
</span><span class="line">
</span><span class="line">@                      900      IN NS    ns1.softlayer.com.
</span><span class="line">@                      900      IN NS    ns2.softlayer.com.
</span><span class="line">
</span><span class="line">@                      900      IN MX 10 study.mailabcd.net.
</span><span class="line">
</span><span class="line">@                      900      IN A     119.81.xxx.xx1
</span><span class="line">mail                   86400    IN A     119.81.xxx.xx1
</span><span class="line">study                  86400    IN A     119.81.xxx.xx1</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>こんな感じにしておきます。感覚的に結構はやく名前の情報は反映される印象。
これで準備は出来たので導入をしていきたいと思います。</p>

<h1 id="install-1">Install</h1>

<p>一度にmailman入れるとすこし変だったので一つづつ入れていきます。</p>

<h2 id="postfix">Postfix</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ apt-get install postfix</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>導入時にConfigureで幾つか聞かれるので回答してします。
また設定は <code>/etc/postfix/main.cf</code> になります。</p>

<ol>
  <li>General type : Internet Site</li>
  <li>Site Name : mailabcd.net </li>
  <li>設定ファイルは以下の様になります。ただし alias_maps で指定している /var/lib/mailman/data/aliases はmailman導入後に出来るため現時点ではエラーになります。</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">smtpd_relay_restrictions = permit_mynetworks permit_sasl_authenticated defer_unauth_destination
</span><span class="line">myhostname = study.mailabcd.net
</span><span class="line">alias_maps = hash:/etc/aliases, hash:/var/lib/mailman/data/aliases
</span><span class="line">alias_database = hash:/etc/aliases
</span><span class="line">myorigin = /etc/mailname
</span><span class="line">mydestination = mailabcd.net, study.mailabcd.net, localhost.mailabcd.net, localhost
</span><span class="line">relayhost =
</span><span class="line">mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128
</span><span class="line">mailbox_size_limit = 0
</span><span class="line">recipient_delimiter = +
</span><span class="line">inet_interfaces = all
</span><span class="line">owner_request_special = no
</span><span class="line">unknown_local_recipient_reject_code = 550</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="fcgiwrap">fcgiwrap</h2>

<p>cgiを動かす必要がありますが今回はnginx経由で使うために fcgiwrap を利用します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ apt-get install fcgiwrap</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>サービスとして動作します</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ service fcgiwrap start
</span><span class="line">$ ps -ef | grep fcgiwrap
</span><span class="line">www-data 10577     1  0 Jul03 ?        00:00:00 /usr/sbin/fcgiwrap -f</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="mailman">Mailman</h2>

<p>本命のmailmanを導入します。日本語がオカシイという情報がネットで見られましたが特に問題はなさそうに見えます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ apt-get install mailman
</span><span class="line">$ dpkg-reconfigure mailman</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>なぜか日本語が導入されませんので導入したら再構成します。その際に[ja]を選択します。</p>

<p>導入後の手順で <code>check_perms</code> をしている事がありますが今回は利用しません。特に問題なく使えるようです。</p>

<p>管理用パスワードの変更</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ mmsitepass
</span><span class="line">New site password:
</span><span class="line">Again to confirm password:
</span><span class="line">Password changed.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>設定は <code>/etc/mailman/mm_cfg.py</code> で行います。
変更を行ったところだけピックアップして書いておきます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">MAILMAN_SITE_LIST = 'mailman'
</span><span class="line">DEFAULT_EMAIL_HOST = 'mailabcd.net'
</span><span class="line">EFAULT_URL_HOST   = 'mailabcd.net'
</span><span class="line">add_virtualhost(DEFAULT_URL_HOST, DEFAULT_EMAIL_HOST)
</span><span class="line">DEFAULT_SERVER_LANGUAGE = 'ja'
</span><span class="line">MTA='Postfix'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>実際にはMTAの箇所をコメントアウトしただけかな。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ newlist mailman
</span><span class="line">Enter the email of the person running the list: hogehoge@gmail.com
</span><span class="line">Initial mailman password:
</span><span class="line">Hit enter to notify mailman owner...</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>これを実行するとaliasesも変更される</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># ls -l /var/lib/mailman/data/aliases*
</span><span class="line">-rw-rw---- 1 root list  1132 Jul  3 20:44 /var/lib/mailman/data/aliases
</span><span class="line">-rw-r----- 1 root list 12288 Jul  3 20:44 /var/lib/mailman/data/aliases.db</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Postfixとmailmanを起動します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ service postfix start
</span><span class="line">$ service mailman start</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>エラーなどがある場合には、 <code>/var/log/</code>配下を確認します。</p>

<h2 id="nginx">Nginx</h2>

<p>最後にフロントエンドになるnginxを導入します</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ apt-get install nginx</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>設定ファイルを修正します。<code>/etc/nginx/fastcgi_params</code>に以下の行をコメントアウト</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#fastcgi_param SCRIPT_FILENAME $request_filename;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>一応WebサイトになってしまうのでRootのファイルを<code>/var/www/mailabc.org/web</code>におけるようにディレクトリを作っておきます。</p>

<p>次に<code>/etc/nginx/site-available/mailabcd.net.vhost</code>にファイルを作る。また有効にするために <code>/etc/nginx/sites-enabled/mailabcd.net</code>にシンボリックリンクを作っておきます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class=""><span class="line">server {
</span><span class="line">       listen 80;
</span><span class="line">       server_name mailabcd.net;
</span><span class="line">       root /var/www/mailabcd.net/web;
</span><span class="line">       if ($http_host != "mailabcd.net") {
</span><span class="line">                 rewrite ^ http://mailabcd.net$request_uri permanent;
</span><span class="line">       }
</span><span class="line">       index index.php index.html;
</span><span class="line">       location = /favicon.ico {
</span><span class="line">                log_not_found off;
</span><span class="line">                access_log off;
</span><span class="line">       }
</span><span class="line">       location = /robots.txt {
</span><span class="line">                allow all;
</span><span class="line">                log_not_found off;
</span><span class="line">                access_log off;
</span><span class="line">       }
</span><span class="line">       # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
</span><span class="line">       location ~ /\. {
</span><span class="line">                deny all;
</span><span class="line">                access_log off;
</span><span class="line">                log_not_found off;
</span><span class="line">       }
</span><span class="line">       location /cgi-bin/mailman {
</span><span class="line">               root /usr/lib/;
</span><span class="line">               fastcgi_split_path_info (^/cgi-bin/mailman/[^/]*)(.*)$;
</span><span class="line">               include /etc/nginx/fastcgi_params;
</span><span class="line">               fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
</span><span class="line">               fastcgi_param PATH_INFO $fastcgi_path_info;
</span><span class="line">               fastcgi_pass unix:/var/run/fcgiwrap.socket;
</span><span class="line">        }
</span><span class="line">        location /images/mailman {
</span><span class="line">               alias /usr/share/images/mailman;
</span><span class="line">        }
</span><span class="line">        location /pipermail {
</span><span class="line">               alias /var/lib/mailman/archives/public;
</span><span class="line">               autoindex on;
</span><span class="line">        }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以下でい起動します</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ service nginx start </span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-2">使ってみる</h1>

<p>サイトへは http://mailabcd.net/cgi-bin/mailman/admin でアクセス可能です。
その後は画面をみて利用する事ができるかと思います。</p>

<h1 id="section-3">ハマった点</h1>

<ul>
  <li>Gmailはメーリングリストへ投稿され記事（正確にはMessage-idが同じ記事）をリジェクト刷るようですね。したがってGmailから送信するとメーリングリストに投稿された後の記事が届かない感じになって動いてない〜って成りました。 強制的にSource変更して書き換えている人もいました <a href="http://mypockt.blogspot.jp/2008/02/gmail.html">my poc kt: Gmail でメーリングリストのメールが弾かれる件を自己環境だけでもとりあえず対処してみた</a></li>
  <li>MX レコードが自動で mail.mailabcd.net に記載されていたけどホスト名を study.mailabcd.net にしていたのでスパム扱いされてメールがgoogleからRejectされて悩んだ。</li>
  <li>メーリングリストのドメインを @study.mailabcd.net から @mailabcd.net に後でで変えたら動作が？な箇所もあり結局再導入した（SoftLayerの場合にはOSReloadすれば５分もいらずに初期化される）</li>
</ul>

<h1 id="section-4">まとめ</h1>

<p>久しぶりにメーリングリストとか入れるとハマりました。Facebookとか色々共有するツールはあるのですがメールはほぼどの端末でも環境でも使えるのが良いですね。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS Workspaces における日本語切替の問題]]></title>
    <link href="http://stepxstep.org/blog/2014/06/14/aws_workspaces_change_input/"/>
    <updated>2014-06-14T08:32:00+09:00</updated>
    <id>http://stepxstep.org/blog/2014/06/14/aws_workspaces_change_input</id>
    <content type="html"><![CDATA[<p>Amazon Web Service の Daas である「Workspaces」を利用していて日本語の切替にハマったので設定方法を書いておきます。</p>

<h1 id="goal">Goal</h1>

<p>日本語の切替が出来る</p>

<h1 id="how-to">How to</h1>

<p>英語版Windows2008R2でできてるWorkspacesですが日本語の切替が上手くないです。
日本語キーボードをどうしても理解しないためのような気もしますがこの段階では不便すぎるので以下のように設定をします。</p>

<iframe width="640" height="390" src="//www.youtube.com/embed/-voaY7xykSs" frameborder="0" allowfullscreen=""></iframe>

<p>ポイントとしては、「日本語」環境と「英語」環境を切り替えるということです。
これで「詳細なキー設定」で定義されている「入力言語のホットキー」で切り替えることが出来ます。
そして、今回の場合は「Google日本語入力」に関しては「あ」（日本語）の状態にしておくと切り替えた時に「あ」になっています。</p>

<p>右下のタスクバーとしての動作は <code>JP</code> &lt;-&gt; <code>EN</code> の切り替えになります。</p>

<h1 id="section">まとめ</h1>

<p>Workspacesが発表されたのは去年のRe:Invent2013でしたね。もうRe:Invent2014の申し込みが始まったことを考えると早いものです。
Workspacesの日本語がらみの問題は「東京リージョン」が出てくる段階で解決しておいて欲しいですね。そもそも東京リージョンは日本語版を入れておいて欲しいところです。とは言え、今の段階でも速度的な事が要件を満たせるのであれば十分に使える感じです。
後は、日本語キーボードが認識しないのはどうにかして欲しいところです。</p>

<h1 id="section-1">追記(2014/06/19)</h1>

<p>日本語<code>JP</code>にてIMEを、Google日本語変換を選択していました。日本語の変換は「設定」で制御できるようです。今回はMacbookから利用しているのですが「英数」「かな」キーを押しても何も反応をしないことからWorkspcaceクライアントの制御の問題かなと思い始めました。とりあえず現時点では日本語入力はすこし面倒な感じですね。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdownで簡単にサイトが構築できる「mkdocs」]]></title>
    <link href="http://stepxstep.org/blog/2014/06/12/mkdocs/"/>
    <updated>2014-06-12T01:06:00+09:00</updated>
    <id>http://stepxstep.org/blog/2014/06/12/mkdocs</id>
    <content type="html"><![CDATA[<h1 id="goal">Goal</h1>

<p>先日Dockerのサイトを見ているとgithubにリンクが張ってありたどっていってmkdocsというMarkdown形式の文章を整形するツールが有ることを知りました。結構良さそうな感じなので使ってみました。</p>

<ul>
  <li><a href="http://www.mkdocs.org/">mkdocs</a></li>
</ul>

<h1 id="howto">Howto</h1>

<p>早速入れてみます。環境は MacOS 10.9 となります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo pip install mkdocs</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>導入はこれで終わりです。
使い方も簡単で、文章（Markdown）を整形するフォルダを用意します。そのフォルダの中で処理を進めていきます。最終的には <code>mkdocs build</code>コマンドで 静的なサイトを作ることが出来ます。</p>

<p>ディレクトリ構成として</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mkdocs.yml
</span><span class="line">docs/
</span><span class="line">	index.md
</span><span class="line">	about.md
</span><span class="line">	abcd01.md</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>という構成です。<code>mkdocs.yml</code>に構成を書いていきます。</p>

<h2 id="mkdocsyml">構成ファイル mkdocs.yml</h2>

<p>単純な形のサンプル。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">site_name: MkLorum
</span><span class="line">pages:
</span><span class="line">- [index.md, Home]
</span><span class="line">- [about.md, About]
</span><span class="line">theme: readthedocs</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>もう少し設定する場合には、<a href="http://www.mkdocs.org/user-guide/configuration/">Configuration - MkDocs</a> を参考にします。</p>

<h2 id="section">プレビュー機能</h2>

<p>プレビュー機能としてmkdocsでローカルにHTTPで起動する事が出来ます。実行後、http://local.host:8000 で接続してみるとかっこいい画面で表示されているのがわかります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ mkdocs serve</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://stepxstep.org/images/mkdocs01.png" alt="images" /></p>

<p>のような形で出力されます。</p>

<h2 id="section-1">ビルド作業</h2>

<p>問題なければ最後に静的ファイルを作成します</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ mkdocs build</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>これでローカルの <code>./site</code> 以下にファイル群が作られます。</p>

<h2 id="section-2">使いこなし</h2>

<p>これらのソースをgitで管理するには <code>echo ¥'site/¥' &gt;&gt; .gitignor</code> で site/ を除いた形で作ると良いです。
出来上がったファイル群は静的なHTMLファイルなので github page とか amazon s3なんかにUpしておければ使い勝手の良いサイトができる事に成ります。</p>

<h1 id="section-3">まとめ</h1>

<p>すごく簡単に綺麗にマニュアルサイトとかが作ることが出来ます。すでにmarkdownの文章があれば見せ方としてWebサイトのように構築することが出来るので機会があれば積極的に使っていきたい。それにしても便利んだな。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redmine の 「Local_Avatar_Plugin」 の画像表示を修正（仮想ホスト運用すると画像のURLがlocalhostに）]]></title>
    <link href="http://stepxstep.org/blog/2014/06/05/redminelocalavatar/"/>
    <updated>2014-06-05T06:41:00+09:00</updated>
    <id>http://stepxstep.org/blog/2014/06/05/redminelocalavatar</id>
    <content type="html"><![CDATA[<h1 id="goal">Goal</h1>

<p>仮想ホスト環境で運用していると、ローカルのIPアドレス:ポート番号（今回のケースでは http://localhost:10000 )がURLに入ってしまっていることがあります。多分理由は場所場所で絶対パスで入ってしまうせいだと思います。
仮想ホストでNginxなどでリバースプロキシしていると別の名前でアクセスすることになり問題になってしまいます。</p>

<p>今回導入した、アバター画像をローカルで利用できる（標準だと gavatar に取りに行ってしまう）プラグインでも同様の問題で画像が表示されない問題がありました。</p>

<ul>
  <li><a href="https://github.com/ncoders/redmine_local_avatars">redmine_local_avatars</a></li>
</ul>

<h1 id="section">修正</h1>

<p>プラグインの中で <code>plugin/redmine_local_avatars/lib/application_helper_avatar_patch.rb</code> の中を修正します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">image_url = url_for :only_path =&gt; true, :controller =&gt; 'account', :action =&gt; 'get_avatar', :id =&gt; user</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上記の <code>url_for</code> で <code>only_path =&gt; false</code>を<code>only_path =&gt;true</code>へ変更させます。
これで相対パスになるので画像が表示されます。</p>

<h1 id="section-1">まとめ</h1>

<p>仮想ホストで使うのってそれほど変わっているわけではないと思うのでこの問題はローカルな問題なんですかね？
もともとonly_pathがfalseで指定されている所見ると理由があるのかもしれません。
とりあえずおっさんの画像が表示されるようになったのでので気分が落ち着いたわ。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redmineのプラグインをアンインストールする]]></title>
    <link href="http://stepxstep.org/blog/2014/06/05/redmienuninstallplugin/"/>
    <updated>2014-06-05T05:29:00+09:00</updated>
    <id>http://stepxstep.org/blog/2014/06/05/redmienuninstallplugin</id>
    <content type="html"><![CDATA[<h1 id="goal">Goal</h1>

<p>Redmine のプラグインの削除</p>

<h1 id="howto">Howto</h1>

<p>先日からどうしてもDocker-Redmineの環境でうまく動かないPluginがあり何度もいじっていてキチンとプラグインを消すやり方を知らかなかったのでメモして置きます</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ rake redmine:plugins:migrate  NAME=hogehoge VERSION=0 RAILS_ENV=production</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>その後、実態であるフィアルを <code>rm -rf &lt;REDMINE&gt;/plugin/hogehoge</code> すれば良いです。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[SoftLayer]ベアメタルサーバの構成検索 sl_config_finder.rb を使ってみる]]></title>
    <link href="http://stepxstep.org/blog/2014/06/01/sldn_configuration_finder/"/>
    <updated>2014-06-01T22:02:00+09:00</updated>
    <id>http://stepxstep.org/blog/2014/06/01/sldn_configuration_finder</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">何が出来るの？</a></li>
  <li><a href="#install">Install</a></li>
  <li><a href="#section-1">使ってみる</a></li>
  <li><a href="#section-2">まとめ</a></li>
</ul>

<h1 id="section">何が出来るの？</h1>

<p>SoftLayer (IBM社のPublic Cloud Service) では様々なリソースの物理サーバがインスタンスとして利用できる（以下ベアメタルサーバ）のが特徴です。 そんなベアメタルサーバのですが構成が多すぎるので構成を検索してくれるスクリプトが<code>gist</code>に出ていました。</p>

<p>というわけで、ここで紹介するツールはSoftLayerのベアメタルサーバの構成を検索する事が出来ます。</p>

<ul>
  <li>この記事は <code>SDN SoftLayer Blog</code> で掲載されていた記事の内容をやってみました。
<a href="http://sldn.softlayer.com/blog/hansKristian/Configuration-Finder-%E2%80%93-Simplify-Your-Server-Search">Configuration Finder – Simplify Your Server Search | SoftLayer Development Network</a></li>
</ul>

<h1 id="install">Install</h1>

<p>rubyすらはいっていなかったので、Rubyを導入するとともに <code>Softlayer_API</code> も導入します。最近はAWS(Amazon Web Service)もそうですがパッケージレポジトリに登録されているので楽ですね。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo apt-get install ruby1.9.3
</span><span class="line">$ sudo gem install softlayer_api
</span><span class="line">$ git clone https://gist.github.com/7f8ca7027034cecddcc4.git</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>次にダウンロード(git cloneした）ファイルの中にアカウント名/APIキーを記載する項目があるのでSoftLayerの管理コンソールからAPIキーを発行した後に中を書き換えておきましょう。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">require 'rubygems'
</span><span class="line">require 'softlayer_api'
</span><span class="line">require 'optparse'
</span><span class="line">$SL_API_USERNAME = "****"
</span><span class="line">$SL_API_KEY = "*****"</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-1">使ってみる</h1>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ./sl_config_finder.rb
</span><span class="line">Usage: ./sl_config_finder.rb [options]
</span><span class="line">    -c, --cpu cores                  Amount of CPU cores desired
</span><span class="line">    -m, --memory amount              Amount of memory desired in GB
</span><span class="line">    -d, --disk amount                Amount of disk spindels desired
</span><span class="line">    -p, --priority pri1,pri2[,pri3]  What order to prioritse resources  (cpu, memory, disk) when searching
</span><span class="line">    -b {higher, lower, nearest},     If exact match for given resource is not found, which way to search
</span><span class="line">        --bias
</span><span class="line">    -h, --help                       Displays Help</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>普通に引数漏れだと動きません。
次に、実際に使ってみます、「CPU(1core),Memory(1G),CPU,Memoryを優先で検索」</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ./sl_config_finder.rb -c 1 -m 1 -p cpu,memory,disk -b higher
</span><span class="line">Desired versus selected specs
</span><span class="line">CPU:            desired - 1   == selected - 2
</span><span class="line">RAM:            desired - 1   == selected - 2
</span><span class="line">Disk spindles:  desired -    == selected - 1
</span><span class="line">=========== Possible packages meeting these requirements ==================
</span><span class="line">===========================================================================
</span><span class="line">ID: 20
</span><span class="line">Name: Express (Dual Core Single Intel and AMD)
</span><span class="line">CPU options
</span><span class="line">Name: Single Processor Dual Core Opteron 1216 - 2.40GHz - 2 x 1MB cache
</span><span class="line">ID: 383 == Cores: 2
</span><span class="line">--------------------------------------------
</span><span class="line">Name: Single Processor Quad Core Opteron 1354 - 2.20GHz - 2 x 1MB cache
</span><span class="line">ID: 674 == Cores: 4
</span><span class="line">--------------------------------------------
</span><span class="line">
</span><span class="line">Ram options:
</span><span class="line">ID: 104 Name: 2 GB DDR2 667
</span><span class="line">===========================================================================</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>こんな感じで、選択できるものが表示されます。このIDの番号はAPIからCreate（Order）するときに必要な番号です。
ちなみに表示までに数十〜数分かかります。何がこんなに遅いのだろうか。</p>

<h1 id="section-2">まとめ</h1>

<p>これで価格まで出てくれれば良い見積もりツールだったのですが現在のところ表示は出来なそうです。 </p>

<p>重い、あまりに遅いので管理コンソール（ブラウザ）で探した方が早いのではなかと思うほどです orz</p>

<p>使い勝手はともかく<code>Source</code>は参考になりそうですね。もう少し重たい原因を見つけておくと良いかもしれません。
SoftLayerではAPIが色々あり導入出来るOSのリストとか簡単に取得できます。その辺りCLIで出来ると良いのですが。 </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Page で独自ドメインを使う]]></title>
    <link href="http://stepxstep.org/blog/2014/06/01/useoriginaldomain/"/>
    <updated>2014-06-01T21:25:00+09:00</updated>
    <id>http://stepxstep.org/blog/2014/06/01/useoriginaldomain</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#goal">Goal</a></li>
  <li><a href="#github-page">Github page側の設定</a></li>
  <li><a href="#dns">DNS側の設定</a></li>
  <li><a href="#section">まとめ</a></li>
</ul>

<h1 id="goal">Goal</h1>

<ul>
  <li>Github pageで独自ドメインを使う</li>
</ul>

<p>このブログのサイトは <code>Github Page</code>で作られています。
ブログ自体は、<code>Octopress</code>を利用しています。
Github padeでも独自ドメインが利用可能になっていて簡単に設定をすることが出来ます。</p>

<ul>
  <li>変更前のドメイン： tokida.github.io</li>
  <li>変更後のドメイン： stepxstep.org</li>
</ul>

<p>参考にするドキュメントは、<a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages">Setting up a custom domain with GitHub Pages</a> になります。</p>

<h1 id="github-page">Github page側の設定</h1>

<p>Githubのサイト側で何かをイジる必要はありません。サイトのトップに <code>CNAME</code> というファイルを作成して中に独自ドメイン（これから設定するドメイン）を指定することで利用することが出来ます。</p>

<p>今回は、Octopressを利用してるので <code>source/CNAME</code> ファイルに書き込みます</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">stepxstep.org</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>この状態で <code>rake gen_deploy</code>すると反映されます。実際に反映されるまで <em>10分程度</em> かかるそうです。（実際に10分程度かかっていました）</p>

<h1 id="dns">DNS側の設定</h1>

<p>今回はドメインの設定はRoute53(Amazon Web ServiceのDNSサービス）を利用します。レジストラ（今回はお名前.com側に Route53のDS名の登録）の設定は終えているとします。</p>

<p>今回は、Apex domains （つまり http://stepxstep.org ）でアクセスすることを想定します。もし Subdomain (つまり http://blog.stepxstep.org 等）で実施する場合には、<code>blog.stepxstep.org</code> に対して <code>CNAME</code> で <code>tokida.github.io</code> を割り当てればよいです。</p>

<p>今回は、Aレコードで stepxstep.org に対して以下の2つのIPアドレスを定義します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ dig stepxstep.org +nostats +nocomments +nocmd
</span><span class="line">
</span><span class="line">; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; stepxstep.org +nostats +nocomments +nocmd
</span><span class="line">;; global options: +cmd
</span><span class="line">;stepxstep.org.			IN	A
</span><span class="line">stepxstep.org.		300	IN	A	192.30.252.153
</span><span class="line">stepxstep.org.		300	IN	A	192.30.252.154</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>このIPアドレスは先程のHelpに記載されているものになります。ググったりすると別のIPを書かれている人もいたので以前とは違う値になっているのかもしれません。いずれにしても現時点では上記のIPで問題無いです。</p>

<h1 id="section">まとめ</h1>

<p>最初に時間が立っていないと github のエラーページが表示されます。暫く待てば動くはずです。
元の <code>tokida.github.io</code> にアクセスすると,一旦お名前.comに飛ばされてしまいますね。これは落ち着くのかな？</p>

<p>それにしても最近は簡単に独自ドメインのサイトが出来てしまって嬉しい限りです、この <code>stepxstep.org</code>も 480円でご購入です。来年度以降はもう少しするんだろうけど。まあそれまでにそのぐらいの額のアフェリエイトでも稼いでくれるようになっていれば元は取れるという。</p>

<p>ほんとに良い世の中になりました。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimの起動画面で履歴を表示できるStartifyを入れてみる]]></title>
    <link href="http://stepxstep.org/blog/2014/05/31/02/"/>
    <updated>2014-05-31T23:02:00+09:00</updated>
    <id>http://stepxstep.org/blog/2014/05/31/02</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#startify-">Startify プラグイン</a>    <ul>
      <li><a href="#install">Install</a></li>
      <li><a href="#section">設定</a></li>
    </ul>
  </li>
  <li><a href="#section-1">まとめ</a>    <ul>
      <li><a href="#section-2">参考</a></li>
    </ul>
  </li>
</ul>

<p>最近、MacとWindowsを行き来することもあり共通で使えるVimを利用しています。
かなり前から使っている割には仕事では素のviを使う機会が多かったこともありVimをカスタマイズして使うということがなかったのですがここのところすっかりプラグイン入れて遊んでいます。</p>

<ul>
  <li><a href="http://ja.wikipedia.org/wiki/Vim">Vim - Wikipedia</a></li>
  <li><a href="http://www.kaoriya.net/software/vim/">Vim — KaoriYa</a></li>
</ul>

<p>日本語で使うために色々パッケージングされたものをKaoriyaさんで公開されていますのでこれから導入される方はオススメです。</p>

<h1 id="startify-">Startify プラグイン</h1>

<p>起動した時の画面が変わります。</p>

<p><img src="http://stepxstep.org/images/2014_06_01_am0_00.png" alt="images" /></p>

<p>こんな感じで起動時に履歴が選択できるようになります。
また <code>:startify</code>でいつでもこの画面を呼び出す事ができます。</p>

<h2 id="install">Install</h2>

<p>導入はいつもどおり NeoBundle 経由で行います。</p>

<ul>
  <li><a href="https://github.com/mhinz/vim-startify">mhinz/vim-startify</a></li>
</ul>

<p>したがって<code>.vimrc</code>の NeoBundleの所に以下のように記述します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">NeoBundle 'mhinz/vim-startify'    "起動時に履歴を表示させる</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>あとは起動後に <code>NeoBundleInstall</code> して導入します。</p>

<h2 id="section">設定</h2>

<p>設定は <code>.vimrc</code> にて行います。
詳細の設定内容は <code>:h startify</code> でヘルプが詳細に書いてあるので見るとわかります。
参考で記載しているサイトの設定を参考にしています。</p>

<div><script src="https://gist.github.com/3a978d48817b98fb4f18.js"></script>
<noscript><pre><code>&quot; Startify
&quot; 起動時の画面の設定
&quot; startifyのヘッダー部分に表示する文字列を設定する(dateコマンドを実行して日付を設定している)
let g:startify_custom_header =
  \ map(split(system(&#39;date&#39;), &#39;\n&#39;), &#39;&quot;   &quot;. v:val&#39;) + [&#39;&#39;,&#39;&#39;]
let g:startify_files_number = 10
&quot; デフォルトだと、最近使ったファイルの先頭は数字なので、使用するアルファベットを指定
&quot; let g:startify_custom_indices = [&#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;r&#39;, &#39;i&#39;, &#39;o&#39;, &#39;b&#39;]
&quot; よく使うファイルをブックマークとして登録しておく
let g:startify_bookmarks = [
  \ &#39;~/.vimrc&#39;,
  \ &#39;~/.gvimrc&#39;,
  \ &#39;~/.bash_profile&#39;,
  \ &#39;~/memo/todo.markdown&#39;,
  \ ]
</code></pre></noscript></div>

<h1 id="section-1">まとめ</h1>

<p>起動画面でさっと履歴が選択できるのはありがたいです。とは言え別のプラグインで同じような事を実装することも出来るようなので珍しいことではないのかもしれませんがプラグイン一つ入れて簡単に出来るのが良かったです。</p>

<h2 id="section-2">参考</h2>

<ul>
  <li><a href="http://deris.hatenablog.jp/entry/2013/12/15/235606">Vimmerなら2013年中に試しておきたい海外産Vim plugin 8選 - derisの日記</a>  </li>
</ul>

]]></content>
  </entry>
  
</feed>
