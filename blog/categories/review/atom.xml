<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Review | なんでもやってみるのが良いと思う]]></title>
  <link href="http://stepxstep.org/blog/categories/review/atom.xml" rel="self"/>
  <link href="http://stepxstep.org/"/>
  <updated>2016-03-29T20:04:38+09:00</updated>
  <id>http://stepxstep.org/</id>
  <author>
    <name><![CDATA[H.Tokida]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CyberduckのCli版duckを利用して簡単にクラウドストレージを利用する]]></title>
    <link href="http://stepxstep.org/blog/2016/03/29/try-ducksh/"/>
    <updated>2016-03-29T19:13:00+09:00</updated>
    <id>http://stepxstep.org/blog/2016/03/29/try-ducksh</id>
    <content type="html"><![CDATA[
<p>CyberDuckという有名なクラウドストレージクライアントがあります。最近見たところ duck.sh なるツールが登場していたので試してみました。</p>

<ul>
  <li><a href="https://duck.sh/">https://duck.sh/</a></li>
</ul>

<p>今回はMacで実施したので</p>

<pre><code>sudo brew install duck
</code></pre>

<p>で導入が出来る。</p>

<p>色々接続ができるがニーズがないであろうが SoftLayer のObject Storage (OpenStack Swift) に接続をしてみます。</p>

<pre><code>$ duck --help
Usage:duck [options...]


URLs must be fully qualified. Paths can either denote a remote file (ftps://user@example.net/resource) or folder (ftps://user@example.net/directory/) with a trailing slash. You can reference files
relative to your home directory with /~ (ftps://user@example.net/~/).
Supported protocols
ftp	FTP (File Transfer Protocol)
	ftp://&lt;hostname&gt;/&lt;folder&gt;/&lt;file&gt;
ftps	FTP-SSL (Explicit AUTH TLS)
	ftps://&lt;hostname&gt;/&lt;folder&gt;/&lt;file&gt;
sftp	SFTP (SSH File Transfer Protocol)
	sftp://&lt;hostname&gt;/&lt;folder&gt;/&lt;file&gt;
dav	WebDAV (Web-based Distributed Authoring and Versioning)
	dav://&lt;hostname&gt;/&lt;folder&gt;/&lt;file&gt;
davs	WebDAV (HTTP/SSL)
	davs://&lt;hostname&gt;/&lt;folder&gt;/&lt;file&gt;
swift	Swift (OpenStack Object Storage)
	swift://&lt;container&gt;/&lt;key&gt;
s3	S3 (Amazon Simple Storage Service)
	s3://&lt;container&gt;/&lt;key&gt;
gs	Google Cloud Storage
	gs://&lt;container&gt;/&lt;key&gt;
azure	Windows Azure Storage
	azure://&lt;container&gt;/&lt;key&gt;
rackspace	Rackspace Cloud Files (US)
	rackspace://&lt;container&gt;/&lt;key&gt;

You can install additional connection profiles in ~/Library/Application Support/Cyberduck/Profiles

    --application &lt;path&gt;                  External editor application
    --copy &lt;url&gt; &lt;url&gt;                    Copy between servers
 -d,--download &lt;url&gt; &lt;[file]&gt;             Download file or folder. Denote a folder with a trailing '/'
 -D,--delete &lt;url&gt;                        Delete
 -e,--existing &lt;action&gt;                   Transfer action for existing files
                                          Options for downloads and uploads:
                                          	Resume	Append existing files (resume)
                                          	Overwrite	Overwrite all files (overwrite)
                                          	Rename	Rename transferred files with a timestamp appended to the filename (similar)
                                          	Rename existing	Rename existing files with timestamp appended to filename (rename)
                                          	Skip	Skip transfer of files that already exist (skip)
                                          	Compare	Skip files that match size, modification date or checksum (compare)
                                          	Cancel	 (cancel)
                                          Options for synchronize:
                                          	Download	Download changed and missing files (download)
                                          	Upload	Upload changed and missing files (upload)
                                          	Mirror	Download and Upload (mirror)
                                          	Cancel	 (cancel)

    --edit &lt;url&gt;                          Edit file in external editor
 -h,--help                                Print this help
 -i,--identity &lt;private key file&gt;         Selects a file from which the identity (private key) for public key authentication is read
 -l,--list &lt;url&gt;                          List files in remote folder
 -L,--longlist                            Long list format with modification date and permission mask
 -p,--password &lt;password or secret key&gt;   Password
 -P,--preserve                            Preserve permissions and modification date for transferred files
    --parallel &lt;connections&gt;              Number of concurrent connections to use for transfers
 -q,--quiet                               Suppress progress messages
 -r,--retry &lt;count&gt;                       Retry failed connection attempts
    --region &lt;location&gt;                   Location of bucket or container
    --synchronize &lt;url&gt; &lt;directory&gt;       Synchronize folders
    --throttle &lt;bytes per second&gt;         Throttle bandwidth
 -u,--username &lt;username or access key&gt;   Username
    --udt                                 Use UDT protocol if applicable
    --upload &lt;url&gt; &lt;file&gt;                 Upload file or folder recursively
 -v,--verbose                             Print transcript
 -V,--version                             Show version number and quit
 -y,--assumeyes                           Assume yes for all prompts

Cyberduck is libre software licenced under the GPL. For general help about using Cyberduck, please refer to https://duck.sh/ and the wiki at http://help.duck.sh/. For bug reports or feature requests
open a ticket at https://trac.cyberduck.io/newticket?version=4.7.3.
Not registered. Purchase a donation key to support the development of this software.
</code></pre>

<p>プロファイルをダウンロード</p>

<ul>
  <li><a href="http://qiita.com/testnin2/items/1868f9f5775ae06afc26">http://qiita.com/testnin2/items/1868f9f5775ae06afc26</a></li>
</ul>

<p>ここに記載されているファイルを <code>~/Library/Application Support/Cyberduck/Profiles/SoftLayer_TOK02_public.cyberduckprofile</code> に保存する。これでこのプロファイルを利用できるようになります。</p>

<p>今回接続する SoftLayer 側の情報として以下のようになっているとします。</p>

<ul>
  <li>TOK2上にObjectStorageを購入</li>
  <li>tokida というContainerを作成済み</li>
  <li>SoftLayer Portalからusername,passwordを取得済み</li>
</ul>

<pre><code>$ duck --list softlayer-tok02_public://tokida/ -u "$usernaem" -p "$password"
Login successful…
.file-segments
Dropbox
a_M00xxx_2003.nsf
a_M00xxx_2004.nsf
a_M00xxx_2005.nsf
</code></pre>

<p>これだけで接続ができます。duckコマンド経由で利用することで SoftLayer Object Storageの制約である5Gなども正しくマルチパートでアップロードしてくれるので非常に便利に利用できますね。</p>

<pre><code>$ duck -u $username -p $password --upload softlayer-tok02_public://tokida/ hosts
Upload complete…
</code></pre>

<pre><code>$ duck -u $username -p $password --delete softlayer-tok02_public://tokida/hosts
Deleting hosts…
</code></pre>

<p>同期もでき、download, mirror , upload が選択できる。</p>

<pre><code>duck -u $username -p $password --synchronize softlayer-tok02_public://tokida/dotfiles ./
Login successful…
Choose what action to take:

 Cancel	 (cancel)
 Download	Download changed and missing files (download)
 Mirror	Download and Upload (mirror)
 Upload	Upload changed and missing files (upload)

Action [cancel, download, mirror, upload]: upload
</code></pre>

<p>クラウドストレージは、費用面で非常に便利だが利用については各クラウドでそれぞれ利用方法が違いコマンドラインで利用するためにも際があるので使い勝手が良いとはいえませんでしたがこの <code>duck</code> を経由することで利用のハードルが下がります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ATOMエディタからOctopressを利用する]]></title>
    <link href="http://stepxstep.org/blog/2016/03/28/test/"/>
    <updated>2016-03-28T02:07:00+09:00</updated>
    <id>http://stepxstep.org/blog/2016/03/28/test</id>
    <content type="html"><![CDATA[
<p>最近はVIMではなくATOMを利用していることもあって Atom エディタから簡単に利用することが出来るのかやってみました。</p>

<p>パッケージ　<code>markdown-writer</code> を利用します。</p>

<p>設定が <code>_mdwriter.cson</code> ファイルに出せるはずなのですが上手く行かなかったので<code>個人設定 config.cson</code>に直接設定を書きこみました。</p>

<p>&#8220;`
“markdown-writer”:
  fileExtension: “.md”
  frontMatter: ‘’’
    —
    layout: <layout>
    title: &#8221;<title>&#8221;
    date: &#8221;<date>&#8221;
    published: false
    comments: false
    tags:
    categories:
    &#8212;
    * Table of Contents
    {:toc}</date></title></layout></p>

<p>’’’
  siteEngine: “octopress”
  siteLocalDir: “/Users/hideaki/tokida.github.com/octopress/source/”
  sitePostsDir: “_posts/”
  siteUrl: “http://stepxstep.org”
&#8220;`</p>

<ul>
  <li><code>siteLocalDir</code> は必須です。最初入れていないでハマりました。その他のDirは siteLocalDirからの相対パスとなります。</li>
  <li>Octpress等のエンジンが選択できますが rake generate等をしてくれることはありません。 画像のフォーマットの指定が Octpress 用のタグを入れてくれるというものになります。</li>
  <li>ドラフト→パブリッシュはフォルダを移動させてくれる。</li>
  <li><code>rake generate</code> を別途実行する必要あがあります。</li>
</ul>

<p>rake generateを実行するために、パッケージ <code>Terminal-Plus</code> を導入します。（run-command2などでもよいかもしれません）
これを利用すると画面のしたにTerminal画面が表示されます。</p>

<p><img class="center" src="images/2016/03/screen20160328-22130.png" width="640" height="480" title="‘screen’" ></p>

<p>ターミナルを開くとドキュメントと同じディレクトリがPATHに設定されるのでそのまま <code>rake preview</code> などと実行すれば利用できます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bluemix-cli]]></title>
    <link href="http://stepxstep.org/blog/2016/03/27/bluemix-cli/"/>
    <updated>2016-03-27T09:01:00+09:00</updated>
    <id>http://stepxstep.org/blog/2016/03/27/bluemix-cli</id>
    <content type="html"><![CDATA[
<p>Bluemix関連はもう色々出すぎていて何が何やらわからないのですが cf コマンドに代わる？bleumix Cliが登場していました。</p>

<ul>
  <li><a href="http://clis.ng.bluemix.net/ui/home.html">http://clis.ng.bluemix.net/ui/home.html</a></li>
</ul>

<p>さっそく導入してみたいと思います。私はMACユーザなのでMAC用のバイナリをダウンロードしてみたいと思います。</p>

<ul>
  <li>Cloud Foundry CLI version 6.11 or later is required for Bluemix CLI. If your system does not already have the correct version of cf CLI, the installer will install it for you. (cfコマンド 6.11以上を導入しておく必要があります。 cf –version で確認します。私は 6.13が導入されていました）</li>
  <li>　導入後パスが設定されていません。.bashrc に以下のPATHを追加しておきます。bash_autocompleteが有るのが今時なツールですね。bluemix と入力した後に tab をいれるとオプションが自動的に出てきて便利です。</li>
</ul>

<pre><code>### Added by the Bluemix CLI
export PATH=$PATH:/usr/local/bluemix/bin
source /usr/local/Bluemix/bx/bash_autocomplete
</code></pre>

<p>ヘルプを見てみるとこんな感じです。</p>

<pre><code>名前:
   ./bx - Bluemix と対話するためのコマンド・ライン・ツール

使用法:
   [environment variables] ./bx [global options] command [arguments...] [command options]

バージョン:
   0.3.1-5206a18-2016-03-02T03:30:07+00:00

コマンド:
   api		 ターゲットの API エンドポイントを設定または表示します
   login	 ユーザーをログインします
   logout	 ユーザーをログアウトします
   target	 ターゲット組織またはスペースを設定または表示します
   info		 Bluemix 情報を表示します
   list		 ターゲット・スペース内のすべての CF アプリケーション、サービス、コンテナー、コンテナー・グループ、および VM グループをリストします
   scale	 アプリまたはコンテナー・グループのインスタンス数を変更します
   curl		 Bluemix への未加工の HTTP 要求を実行します。content-type はデフォルトで「application/json'」に設定されています
   config	 デフォルト値を構成に書き込みます
   iam		 組織、スペース、およびユーザーを管理します
   catalog	 Bluemix カタログを管理します
   app		 Manage Cloud Foundry applications
   vm		 Manage virtual servers
   ic		 Manage IBM containers
   service	 Manage Bluemix services
   network	 Manage network settings including region, domain, route and security group
   security	 セキュリティー設定を管理します
   plugin	 プラグインおよびプラグイン・リポジトリーを管理します
   cf		 Bluemix のコンテキストを使用して Cloud Foundry CLI を実行します
   help

コマンドについて詳しくは、'./bx help [command]' と入力してください。

環境変数:
   BLUEMIX_COLOR=false                     出力に色を付けません
   BLUEMIX_TRACE=true                      API 要求診断を stdout に出力します
   BLUEMIX_TRACE=path/to/trace.log         API 要求診断をログ・ファイルに付加します

グローバル・オプション:
   --version, -v                      バージョンを出力します
   --help, -h                         ヘルプを表示します
</code></pre>

<p>色々なサブコマンドが利用できてこれは便利になります。</p>

<pre><code>$ bx iam
名前:
   bx iam - 組織、スペース、およびユーザーを管理します
使用法:
   bx iam command [arguments...] [command options]

コマンド:
   orgs			 すべての組織をリストします
   org			 指定された組織の情報を表示します
   org-create		 新しい組織を作成します (管理者のみ)
   org-replicate	 組織を別の地域に複製します (管理者のみ)
   org-rename		 組織を名前変更します (組織管理者が必要)
   org-delete		 組織を削除します (管理者のみ)
   spaces		 現行組織内のすべてのスペースをリストします
   space		 指定されたスペースの情報を表示します
   space-create		 新しいスペースを作成します (組織管理者が必要)
   space-rename		 現行組織内のスペースを名前変更します (組織管理者が必要)
   space-delete		 現行組織内のスペースを削除します (組織管理者が必要)
   user-create		 新しいユーザーを作成します (管理者のみ)
   user-delete		 ユーザーを削除します (管理者のみ)
   org-users		 指定された組織内のユーザーを役割別に表示します
   org-role-set		 ユーザーに組織の役割を割り当てます (組織管理者が必要)
   org-role-unset	 ユーザーから組織の役割を削除します (組織管理者が必要)
   space-users		 指定されたスペース内のユーザーを役割別に表示します
   space-role-set	 ユーザーにスペースの役割を割り当てます (スペース管理者が必要)
   space-role-unset	 ユーザーからスペースの役割を削除します (スペース管理者が必要)
   help

コマンドについて詳しくは、'bx iam help [command]' と入力してください。
</code></pre>

<p>これまで cf コマンドでアプリケーションを管理していましたがこのbluemixコマンドで Bluemixとして実施することが大分楽になりそうです。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vyatta を VyOS にアップデートして Vxlan を利用する]]></title>
    <link href="http://stepxstep.org/blog/2014/11/04/vyatta2vyos/"/>
    <updated>2014-11-04T02:29:00+09:00</updated>
    <id>http://stepxstep.org/blog/2014/11/04/vyatta2vyos</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#add-system-images">add system images</a></li>
  <li><a href="#vxlan-on-vyos-">vxlan on VyOS を試す</a></li>
</ul>

<p>VyOSを利用してみたかったので一旦Vyattaを導入してアップデート <sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> を試みる。
利用している環境は、SoftLayer上の仮想サーバ(Vyatta6.5導入済み）を利用しています。</p>

<h1 id="add-system-images">add system images</h1>

<p>VyOSへのアップデートの方法は、公式サイトの以下のリンクに記載されています。</p>

<ul>
  <li><a href="http://wiki.vyos-users.jp/Vyatta%E3%81%8B%E3%82%89%E3%81%AE%E7%A7%BB%E8%A1%8C">vyos-users.jp</a></li>
</ul>

<p>今回はVersion1.1を試してみたいと思います。</p>

<pre><code>vyatta@vyatta-dal01:~$ show system image
The system currently has the following image(s) installed:

   1: Old-non-image-installation (default boot)

vyatta@vyatta-dal01:~$ add system image http://ftp.tsukuba.wide.ad.jp/software/vyos/iso/release/1.1.0/vyos-1.1.0-amd64.iso
Trying to fetch ISO file from http://ftp.tsukuba.wide.ad.jp/software/vyos/iso/release/1.1.0/vyos-1.1.0-amd64.iso
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  231M  100  231M    0     0  5687k      0  0:00:41  0:00:41 --:--:-- 8782k
ISO download succeeded.
Checking for digital signature file...
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   836  100   836    0     0    540      0  0:00:01  0:00:01 --:--:--  2229
Found it.  Checking digital signature...
gpg: directory `/root/.gnupg' created
gpg: new configuration file `/root/.gnupg/gpg.conf' created
gpg: WARNING: options in `/root/.gnupg/gpg.conf' are not yet active during this run
gpg: keyring `/root/.gnupg/pubring.gpg' created
gpg: Signature made Thu Oct  9 17:42:59 2014 CDT using RSA key ID A442E6E9
gpg: /root/.gnupg/trustdb.gpg: trustdb created
gpg: Good signature from "SO3 Group Maintainers &lt;maintainers@so3group.net&gt;"
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: DD5B B405 35E7 F6E3 4278  1ABF B744 E25A A442 E6E9
Digital signature is valid.
Checking MD5 checksums of files on the ISO image...OK.
Done!
What would you like to name this image? [1.1.0]:
OK.  This image will be named: 1.1.0
Installing "1.1.0" image.
Copying new release files...
Would you like to save the current configuration
directory and config file? (Yes/No) [Yes]:
Copying current configuration...
Would you like to save the SSH host keys from your
current configuration? (Yes/No) [Yes]:
Copying SSH keys...
Setting up grub configuration...
Done.
vyatta@vyatta-dal01:~$ show system image
The system currently has the following image(s) installed:

   1: 1.1.0 (default boot)
   2: Old-non-image-installation
</code></pre>

<p>この状態で<code>reboot</code>をすると新しいイメージで起動をしてきます。</p>

<pre><code>Welcome to VyOS
vyatta@67.228.185.132's password:
Linux vyatta 3.13.11-1-amd64-vyos #1 SMP Wed Sep 3 20:04:22 UTC 2014 x86_64
Welcome to VyOS.
This system is open-source software. The exact distribution terms for
each module comprising the full system are described in the individual
files in /usr/share/doc/*/copyright.
</code></pre>

<h1 id="vxlan-on-vyos-">vxlan on VyOS を試す</h1>

<p>少し前に vxlan on Softlayer ということで同一データセンター内ではマルチキャストが通信できるのでvlanが使えたという事を書きました。VyOSの最新版ではvxlanがサポートされているとのことなので試します。</p>

<pre><code>vyatta@vyatta-dal01# configure
[edit]
vyatta@vyatta-dal01# set interfaces  vxlan vxlan0
[edit]
vyatta@vyatta-dal01# set interfaces vxlan vxlan0 group 239.1.1.1
[edit]
vyatta@vyatta-dal01# set interfaces vxlan vxlan0 vni 42
[edit]
vyatta@vyatta-dal01# ip a

vyatta@vyatta-dal01# set interfaces vxlan vxlan0 address '192.168.42.254/24'
[edit]
vyatta@vyatta-dal01# commit
[edit]
vyatta@vyatta-dal01# save
Saving configuration to '/config/config.boot'...
Done
[edit]
vyatta@vyatta-dal01#   show interfaces vxlan vxlan0
 address 192.168.42.254/24
 group 239.1.1.1
 vni 42
[edit]
vyatta@vyatta-dal01# ip a
4: vxlan0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UNKNOWN group default
    link/ether b6:37:f4:fa:30:d0 brd ff:ff:ff:ff:ff:ff
    inet 192.168.42.254/24 brd 192.168.42.255 scope global vxlan0
       valid_lft forever preferred_lft forever
    inet6 fe80::b437:f4ff:fefa:30d0/64 scope link
[edit]	
</code></pre>

<p>他のサーバの設定は <a href="http://stepxstep.org/blog/2014/11/01/vxlan-on-softlayer/">Vxlan on Softlayer - なんでもやってみるのが良いと思う</a> として行います。現状でこの構成に今回の VyOS が追加されている形になります。</p>

<pre><code>vyatta@vyatta-dal01:~$ ping 192.168.42.2
PING 192.168.42.2 (192.168.42.2) 56(84) bytes of data.
64 bytes from 192.168.42.2: icmp_req=1 ttl=64 time=0.635 ms
64 bytes from 192.168.42.2: icmp_req=2 ttl=64 time=0.402 ms
^C
--- 192.168.42.2 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 999ms
rtt min/avg/max/mdev = 0.402/0.518/0.635/0.118 ms
vyatta@vyatta-dal01:~$ ping 192.168.42.3
PING 192.168.42.3 (192.168.42.3) 56(84) bytes of data.
64 bytes from 192.168.42.3: icmp_req=1 ttl=64 time=1.52 ms
64 bytes from 192.168.42.3: icmp_req=2 ttl=64 time=0.303 ms
^C
--- 192.168.42.3 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1001ms
rtt min/avg/max/mdev = 0.303/0.913/1.523/0.610 ms
</code></pre>

<p>ということで問題なく疎通が出来ています。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>SoftLayerでは仮想サーバのOSを独自には導入できないので初期にVyOSが入れられない。 <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SoftlayerのslコマンドのDocker化]]></title>
    <link href="http://stepxstep.org/blog/2014/11/04/sl-docker/"/>
    <updated>2014-11-04T01:46:00+09:00</updated>
    <id>http://stepxstep.org/blog/2014/11/04/sl-docker</id>
    <content type="html"><![CDATA[<p>SoftLayerのSLコマンドをDocker化しました。
単にDockerhubのAutomated Buildで遊んでみたかっただけなのですが・・</p>

<p>特に理由ないのですが各Linuxサーバに Python + SoftLayer-Cli 入れるのと Docker 入れるのとどっちがいいかなと思った場合にアプリケーションに影響なく利用できそうなのはDockerかなと。</p>

<p>作ってみてローカルのMacbookで利用しているのですが便利です。
これまでVagrant経由でVM起動してそのなかでゴニョゴニョしていました。今回のDockerにしてもboot2dockerで結局のところ似たような感じなのですが<code>config setup</code>で複数のSoftLayer環境を用意する際や、VersionUpをした際に簡単に分離して管理できるのは楽でした。 (まあ.dotfile切り替えるだけなら別の手段もあるかと思いますが)</p>

<h1 id="section">利用方法</h1>

<h2 id="section-1">想定</h2>

<p>このツールは、IBM社のクラウドサービス「SoftLayer」のCLIコマンドである sl コマンドを利用することが出来ます。
本番機などであまりslコマンド及び前提であるpythonを導入したくない場合。Dockerを利用うすることでOS側に影響なくコマンドを利用することが出来ます。 このDockerのImageは470MByte前後のサイズに成ります。</p>

<h2 id="section-2">設定</h2>

<p>以下のコマンドで設定ファイルをコンテナ内部に作ります。</p>

<p><code>$ docker run  -ti tokida/softlayer-cli config setup</code></p>

<p>通常のslコマンド同様にUsernameとAPIキーを設定して下さい。
次に、コンテナを自分用としてローカルにcommitしておきます。</p>

<p><code>$ docker restart 993ae5495011</code></p>

<p>一度コンテナをRestartします。</p>

<p><code>$ docker commit -m "my account" 993ae5495011 tokida/softlayer-cli:my</code></p>

<p>(数字はコンテナIDで <code>docker ps -a</code>で参照すること)
ここではTagに<code>my</code>をつけています。</p>

<h2 id="section-3">利用方法</h2>

<p><code>$ docker run  -ti tokida/softlayer-cli:my  vs list</code></p>

<p>という形で利用することが出来ます。長いのでシェルでエリアス等をしておくと良いかと思います。</p>

<p><code>$ alias sl="docker run  -ti tokida/softlayer-cli:my"</code></p>

<p>こうしておくと普段通り <code>sl</code> コマンドが利用できます。</p>

]]></content>
  </entry>
  
</feed>
