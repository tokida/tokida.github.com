<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: SoftLayer | なんでもやってみるのが良いと思う]]></title>
  <link href="http://stepxstep.org/blog/tags/softlayer/atom.xml" rel="self"/>
  <link href="http://stepxstep.org/"/>
  <updated>2016-03-29T20:02:26+09:00</updated>
  <id>http://stepxstep.org/</id>
  <author>
    <name><![CDATA[H.Tokida]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CyverduckのCli版duckを利用して簡単にクラウドストレージを利用する]]></title>
    <link href="http://stepxstep.org/blog/2016/03/29/try-ducksh/"/>
    <updated>2016-03-29T19:13:00+09:00</updated>
    <id>http://stepxstep.org/blog/2016/03/29/try-ducksh</id>
    <content type="html"><![CDATA[
<p>CyberDuckという有名なクラウドストレージクライアントがあります。最近見たところ duck.sh なるツールが登場していたので試してみました。</p>

<ul>
  <li><a href="https://duck.sh/">https://duck.sh/</a></li>
</ul>

<p>今回はMacで実施したので</p>

<pre><code>sudo brew install duck
</code></pre>

<p>で導入が出来る。</p>

<p>色々接続ができるがニーズがないであろうが SoftLayer のObject Storage (OpenStack Swift) に接続をしてみます。</p>

<pre><code>$ duck --help
Usage:duck [options...]


URLs must be fully qualified. Paths can either denote a remote file (ftps://user@example.net/resource) or folder (ftps://user@example.net/directory/) with a trailing slash. You can reference files
relative to your home directory with /~ (ftps://user@example.net/~/).
Supported protocols
ftp	FTP (File Transfer Protocol)
	ftp://&lt;hostname&gt;/&lt;folder&gt;/&lt;file&gt;
ftps	FTP-SSL (Explicit AUTH TLS)
	ftps://&lt;hostname&gt;/&lt;folder&gt;/&lt;file&gt;
sftp	SFTP (SSH File Transfer Protocol)
	sftp://&lt;hostname&gt;/&lt;folder&gt;/&lt;file&gt;
dav	WebDAV (Web-based Distributed Authoring and Versioning)
	dav://&lt;hostname&gt;/&lt;folder&gt;/&lt;file&gt;
davs	WebDAV (HTTP/SSL)
	davs://&lt;hostname&gt;/&lt;folder&gt;/&lt;file&gt;
swift	Swift (OpenStack Object Storage)
	swift://&lt;container&gt;/&lt;key&gt;
s3	S3 (Amazon Simple Storage Service)
	s3://&lt;container&gt;/&lt;key&gt;
gs	Google Cloud Storage
	gs://&lt;container&gt;/&lt;key&gt;
azure	Windows Azure Storage
	azure://&lt;container&gt;/&lt;key&gt;
rackspace	Rackspace Cloud Files (US)
	rackspace://&lt;container&gt;/&lt;key&gt;

You can install additional connection profiles in ~/Library/Application Support/Cyberduck/Profiles

    --application &lt;path&gt;                  External editor application
    --copy &lt;url&gt; &lt;url&gt;                    Copy between servers
 -d,--download &lt;url&gt; &lt;[file]&gt;             Download file or folder. Denote a folder with a trailing '/'
 -D,--delete &lt;url&gt;                        Delete
 -e,--existing &lt;action&gt;                   Transfer action for existing files
                                          Options for downloads and uploads:
                                          	Resume	Append existing files (resume)
                                          	Overwrite	Overwrite all files (overwrite)
                                          	Rename	Rename transferred files with a timestamp appended to the filename (similar)
                                          	Rename existing	Rename existing files with timestamp appended to filename (rename)
                                          	Skip	Skip transfer of files that already exist (skip)
                                          	Compare	Skip files that match size, modification date or checksum (compare)
                                          	Cancel	 (cancel)
                                          Options for synchronize:
                                          	Download	Download changed and missing files (download)
                                          	Upload	Upload changed and missing files (upload)
                                          	Mirror	Download and Upload (mirror)
                                          	Cancel	 (cancel)

    --edit &lt;url&gt;                          Edit file in external editor
 -h,--help                                Print this help
 -i,--identity &lt;private key file&gt;         Selects a file from which the identity (private key) for public key authentication is read
 -l,--list &lt;url&gt;                          List files in remote folder
 -L,--longlist                            Long list format with modification date and permission mask
 -p,--password &lt;password or secret key&gt;   Password
 -P,--preserve                            Preserve permissions and modification date for transferred files
    --parallel &lt;connections&gt;              Number of concurrent connections to use for transfers
 -q,--quiet                               Suppress progress messages
 -r,--retry &lt;count&gt;                       Retry failed connection attempts
    --region &lt;location&gt;                   Location of bucket or container
    --synchronize &lt;url&gt; &lt;directory&gt;       Synchronize folders
    --throttle &lt;bytes per second&gt;         Throttle bandwidth
 -u,--username &lt;username or access key&gt;   Username
    --udt                                 Use UDT protocol if applicable
    --upload &lt;url&gt; &lt;file&gt;                 Upload file or folder recursively
 -v,--verbose                             Print transcript
 -V,--version                             Show version number and quit
 -y,--assumeyes                           Assume yes for all prompts

Cyberduck is libre software licenced under the GPL. For general help about using Cyberduck, please refer to https://duck.sh/ and the wiki at http://help.duck.sh/. For bug reports or feature requests
open a ticket at https://trac.cyberduck.io/newticket?version=4.7.3.
Not registered. Purchase a donation key to support the development of this software.
</code></pre>

<p>プロファイルをダウンロード</p>

<ul>
  <li><a href="http://qiita.com/testnin2/items/1868f9f5775ae06afc26">http://qiita.com/testnin2/items/1868f9f5775ae06afc26</a></li>
</ul>

<p>ここに記載されているファイルを <code>~/Library/Application Support/Cyberduck/Profiles/SoftLayer_TOK02_public.cyberduckprofile</code> に保存する。これでこのプロファイルを利用できるようになります。</p>

<p>今回接続する SoftLayer 側の情報として以下のようになっているとします。</p>

<ul>
  <li>TOK2上にObjectStorageを購入</li>
  <li>tokida というContainerを作成済み</li>
  <li>SoftLayer Portalからusername,passwordを取得済み</li>
</ul>

<pre><code>$ duck --list softlayer-tok02_public://tokida/ -u "$usernaem" -p "$password"
Login successful…
.file-segments
Dropbox
a_M00xxx_2003.nsf
a_M00xxx_2004.nsf
a_M00xxx_2005.nsf
</code></pre>

<p>これだけで接続ができます。duckコマンド経由で利用することで SoftLayer Object Storageの制約である5Gなども正しくマルチパートでアップロードしてくれるので非常に便利に利用できますね。</p>

<pre><code>$ duck -u $username -p $password --upload softlayer-tok02_public://tokida/ hosts
Upload complete…
</code></pre>

<pre><code>$ duck -u $username -p $password --delete softlayer-tok02_public://tokida/hosts
Deleting hosts…
</code></pre>

<p>同期もでき、download, mirror , upload が選択できる。</p>

<pre><code>duck -u $username -p $password --synchronize softlayer-tok02_public://tokida/dotfiles ./
Login successful…
Choose what action to take:

 Cancel	 (cancel)
 Download	Download changed and missing files (download)
 Mirror	Download and Upload (mirror)
 Upload	Upload changed and missing files (upload)

Action [cancel, download, mirror, upload]: upload
</code></pre>

<p>クラウドストレージは、費用面で非常に便利だが利用については各クラウドでそれぞれ利用方法が違いコマンドラインで利用するためにも際があるので使い勝手が良いとはいえませんでしたがこの <code>duck</code> を経由することで利用のハードルが下がります。</p>
]]></content>
  </entry>
  
</feed>
